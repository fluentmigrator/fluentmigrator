name: Update TargetFramework  
  
on:  
  schedule:  
    - cron: '0 0 * * 0' # Runs weekly  
  workflow_dispatch:  
  
jobs:  
  update-targetframework:  
    runs-on: ubuntu-latest  
    steps:  
      - name: Checkout repository  
        uses: actions/checkout@v2  
  
      - name: Get Latest .NET Version  
        id: get-latest-version  
        run: |  
          latest_active_channel_version=$(curl -s https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json | jq -r '[.["releases-index"][] | select(.["support-phase"] == "active")] | max_by( ."channel-version" ) | .["channel-version"]')
          echo "Latest Active .NET Channel Version: $latest_active_channel_version"  
          echo "LATEST_VERSION=$latest_active_channel_version" >> $GITHUB_ENV
  
      - name: Update TargetFramework
        run: |
          echo "Updating TargetFramework to net$LATEST_VERSION"
          find . -name '*.csproj' | while read csproj; do
            # Extract the current TargetFrameworks value
            TARGET_FRAMEWORKS=$(grep -oP '(?<=<TargetFrameworks>).*?(?=</TargetFrameworks>)' "$csproj")
            echo "TARGET_FRAMEWORKS" $TARGET_FRAMEWORKS
            if [[ -n "$TARGET_FRAMEWORKS" ]]; then
              # Check if the LATEST_VERSION is already in the TargetFrameworks
              if [[ ! "$TARGET_FRAMEWORKS" =~ (^|;)${LATEST_VERSION}($|;) ]]; then
                # Append the LATEST_VERSION to the TargetFrameworks
                NEW_TARGET_FRAMEWORKS="${TARGET_FRAMEWORKS};${LATEST_VERSION}"
                # Replace the old TargetFrameworks with the new one
                sed -i "s|<TargetFrameworks>${TARGET_FRAMEWORKS}</TargetFrameworks>|<TargetFrameworks>${NEW_TARGET_FRAMEWORKS}</TargetFrameworks>|g" "$csproj"
                echo "NEW_TARGET_FRAMEWORKS" $NEW_TARGET_FRAMEWORKS
              fi
            fi
          done
          git config --global user.name 'github-actions[bot]'  
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'  
          git checkout -b update-targetframework-net$LATEST_VERSION  
          git commit -am "Update TargetFramework to net$LATEST_VERSION"  
          git push origin update-targetframework-net$LATEST_VERSION

          gh pr create \
          --title "Add support for TargetFramework net$LATEST_VERSION." \
          --body "According to https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json, a new major release of .NET runtime is now actively supported." \
          --base main \
          --head update-targetframework-net$LATEST_VERSION \
          --label feature \
          --draft=false
        # Per https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/using-github-cli-in-workflows
        # Quote: "GitHub CLI is preinstalled on all GitHub-hosted runners. For each step that uses GitHub CLI, you must set an environment variable called GH_TOKEN to a token with the required scopes."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
