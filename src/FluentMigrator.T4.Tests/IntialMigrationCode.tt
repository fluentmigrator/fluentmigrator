<#
/*
T4 Template for importing the DB structure for the Fluent Migration. Adapted from PetaPoco/Subsonic T4 code.
Created by Guru Kathiresan - gururamnath  -att-   yahoo.com
-----------------------------------------------------------------------------------------
 
Features
=========
* Generate Intial Table structure for all support DB
* Support for Index code generation for SQLite DB

Todo
====

1) Ability to import other DB items like Triggers/Procedures/etc..
2) Abiity add the intial setup data
3) Generated ForeignKey code does not work for SQLite. FM problem ?
3) Generated ForeignKey and Index code for Oracle/MSSQL/MSSQL Compact/MySQL/PGSQL
*/

#><#@ include file="FM.Core.ttinclude" #><#

    // Settings
    ConnectionStringName = "";			// Uses last connection string in config if not specified
    Namespace = "Migrations";
    ClassPrefix = "";
    ClassSuffix = "";
    IncludeViews = false;
    
    var generator = new CodeGenerator(ConnectionString, ProviderName, new DelegateTextWriter(x=>WriteLine(x)), s=>Warning(s));


    // Read schema
    var tables = generator.LoadTables();

/*
    // Tweak Schema
    tables["tablename"].Ignore = true;							// To ignore a table
    tables["tablename"].ClassName = "newname";					// To change the class name of a table
    tables["tablename"]["columnname"].Ignore = true;			// To ignore a column
    tables["tablename"]["columnname"].PropertyName="newname";	// To change the property name of a column
    tables["tablename"]["columnname"].PropertyType="bool";		// To change the property type of a column
*/

    // Generate output

#><#

if (string.IsNullOrEmpty(Namespace)) Namespace=ConnectionStringName;
if (string.IsNullOrEmpty(Namespace)) Namespace="FluentMigration";
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Linq.Expressions;
using FluentMigrator;

namespace <#=Namespace #>
{
    [Migration(<#=GetCurrentTimeStamp()#>)]
    public class CreateInitialDB : Migration
    {
        public override void Up()
        {
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
#>
            //For <#=tbl.Name#>
            Create.Table("<#=tbl.Name#>")<#if (string.IsNullOrEmpty(tbl.Schema) == false ){#>.InSchema("<#=tbl.Schema#>")<#}#> 
<#
    var ColumnList = from c in tbl.Columns where !c.Ignore select c;
foreach(Column col in ColumnList)
{
#>                .WithColumn("<#=col.Name#>").<#=generator.GetMigrationTypeFunctionForType(col.PropertyType,col.Size,col.Precision)
#><#if (col.IsPrimaryKey){#>.PrimaryKey()<#}#><#if (col.IsAutoIncrement){#>.Identity()<#}#><#if (col.IsNullable){#>.Nullable()<#} else {#>.NotNullable()<#}#><#if (col.DefaultValue != null){#>.WithDefaultValue(<#= generator.GetColumnDefaultValue(col) #>)<#}#>
<#
}
#>			;
<#
    List<TableIndex> IndexList = tbl.Indexes;
foreach(TableIndex indx in IndexList)
{
#>
            Create.Index("<#=indx.Name#>").OnTable("<#=tbl.Name#>")<#if (string.IsNullOrEmpty(tbl.Schema) == false ){#>.InSchema("<#=tbl.Schema#>")<#}#>
<#
foreach(IndexColumn col in indx.IndexColumns)
{
#>                .OnColumn("<#=col.Name#>")<#if (col.IsAsc){#>.Ascending()<#}else{#>.Descending()<#}#>
<#
}
#><#if (indx.IsUnique){
#>                .WithOptions().Unique()<#}#>
            ;
<#
}
#>
<#
}
#>

<#
bool commentAlreadyWritten = false;
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
List<ForeignKey> FKeyList = tbl.ForeignKeys;
foreach(ForeignKey fkey in FKeyList)
{
#>
           <# if(commentAlreadyWritten == false) { #> //Foreign Key List <# commentAlreadyWritten = true;} #>
           Create.<# 
    if(!string.IsNullOrEmpty(fkey.Name)) 
    { 
        #>ForeignKey("<#=fkey.Name#>")<# 
    } #>.FromTable("<#=tbl.Name#>").InSchema("<#=fkey.ForeignTableSchema#>").ForeignColumns(<#=Join(fkey.ForeignColumns)#>).ToTable("<#=fkey.PrimaryTable#>").InSchema("<#=fkey.PrimaryTableSchema#>").PrimaryColumns(<#=Join(fkey.PrimaryColumns)#>);
           <#
}
}
#>
        }

        public override void Down()
        {
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
    List<ForeignKey> FKeyList = tbl.ForeignKeys;
    foreach(ForeignKey fkey in FKeyList)
    {
        if(!string.IsNullOrEmpty(fkey.Name)){
        #>
            Delete.ForeignKey("<#=fkey.Name#>"); 
        <#
        
        } else {
        #>
            Delete.ForeignKey().FromTable("<#=tbl.Name#>").InSchema("<#=fkey.ForeignTableSchema#>").ForeignColumns(<#=Join(fkey.ForeignColumns)#>).ToTable("<#=fkey.PrimaryTable#>")/*.InSchema("<#=fkey.PrimaryTableSchema#>")*/.PrimaryColumns(<#=Join(fkey.PrimaryColumns)#>); 
        <#
        }
    }
}
#>

<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
    foreach(TableIndex idx in from i in tbl.Indexes select i)
    {
#>
            Delete.Index("<#=idx.Name#>");
<#
    }
}
#>

<#
var DeleteTableList = from t in tables where !t.Ignore select t;
if (DeleteTableList != null)
    DeleteTableList = DeleteTableList.Reverse();
foreach(Table tbl in DeleteTableList)
{
#>
            Delete.Table("<#=tbl.Name#>");
<#
}
#>
        }
    }
}


