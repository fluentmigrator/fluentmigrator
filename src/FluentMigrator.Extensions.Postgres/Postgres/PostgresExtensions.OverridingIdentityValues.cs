#region License
// Copyright (c) 2021, Fluent Migrator Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

using System;

using FluentMigrator.Builders.Insert;
using FluentMigrator.Expressions;
using FluentMigrator.Infrastructure;
using FluentMigrator.Infrastructure.Extensions;

namespace FluentMigrator.Postgres
{
    /// <summary>
    /// Provides extension methods for PostgreSQL-specific functionality in FluentMigrator.
    /// </summary>
    /// <remarks>
    /// This class contains constants and methods that facilitate the use of PostgreSQL-specific features,
    /// such as overriding identity values and additional index or column options.
    /// </remarks>
    public static partial class PostgresExtensions
    {
        /// <summary>
        /// Represents the key used to specify the "OVERRIDING {SYSTEM|USER} VALUE" feature
        /// for PostgreSQL insert operations.
        /// </summary>
        /// <remarks>
        /// This constant is utilized to add or retrieve the <c>OVERRIDING SYSTEM VALUE</c>
        /// or <c>OVERRIDING USER VALUE</c> behavior in PostgreSQL insert statements.
        /// It is primarily used in conjunction with the <see cref="InsertDataExpression.AdditionalFeatures"/> 
        /// dictionary to enable overriding identity values.
        /// </remarks>
        public const string OverridingIdentityValues = "PostgresOverridingIdentityValues";

        /// <summary>
        /// Adds an OVERRIDING SYSTEM VALUE clause in the current <see cref="IInsertDataSyntax"/> expression.
        /// This enables the system-generated values to be overriden with the user-specified explicit values (other than <c>DEFAULT</c>)
        /// for identity columns defined as <c>GENERATED ALWAYS</c>
        /// </summary>
        /// <param name="expression">The current <see cref="IInsertDataSyntax"/> expression</param>
        /// <returns>The current <see cref="IInsertDataSyntax"/> expression</returns>
        public static IInsertDataSyntax WithOverridingSystemValue(this IInsertDataSyntax expression) =>
            SetOverridingIdentityValues(expression, PostgresOverridingIdentityValuesType.System, nameof(WithOverridingSystemValue));

        /// <summary>
        /// Adds an OVERRIDING USER VALUE clause in the current <see cref="IInsertDataSyntax"/> expression.
        /// Any user-specified values will be ignored and the system-generated values will be applied
        /// for identity columns defined as <c>GENERATED BY DEFAULT</c>
        /// </summary>
        /// <param name="expression">The current <see cref="IInsertDataSyntax"/> expression</param>
        /// <returns>The current <see cref="IInsertDataSyntax"/> expression</returns>
        public static IInsertDataSyntax WithOverridingUserValue(this IInsertDataSyntax expression) =>
            SetOverridingIdentityValues(expression, PostgresOverridingIdentityValuesType.User, nameof(WithOverridingUserValue));

        /// <summary>
        /// Set the additional feature for overriding identity values with the specified <see cref="PostgresOverridingIdentityValuesType"/>
        /// on the provided <see cref="IInsertDataSyntax"/> expression
        /// </summary>
        /// <exception cref="InvalidOperationException"></exception>
        private static IInsertDataSyntax SetOverridingIdentityValues(
            IInsertDataSyntax expression,
            PostgresOverridingIdentityValuesType overridingType,
            string callingMethod)
        {
            if (!(expression is ISupportAdditionalFeatures castExpression))
            {
                throw new InvalidOperationException(
                    string.Format(
                        ErrorMessages.MethodXMustBeCalledOnObjectImplementingY,
                        callingMethod,
                        nameof(ISupportAdditionalFeatures)));
            }

            castExpression.SetAdditionalFeature(OverridingIdentityValues, overridingType);

            return expression;
        }
    }
}
