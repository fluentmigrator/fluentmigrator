<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sap.Data.Hana.v3.5</name>
    </assembly>
    <members>
        <member name="T:Sap.Data.Hana.HanaRowsCopiedEventArgs">
            <summary>
            <para>Represents the set of arguments passed to the HanaRowsCopiedEventHandler.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaRowsCopiedEventArgs.#ctor(System.Int64)">
            <summary>
            <para>Creates a new instance of the HanaRowsCopiedEventArgs object.</para>
        </summary><param name="rowsCopied">
            An 64-bit integer value that indicates the number of rows copied during the current bulk-copy operation. 
        </param>
        </member>
        <member name="P:Sap.Data.Hana.HanaRowsCopiedEventArgs.Abort">
            <summary>
            <para>Gets or sets a value that indicates whether the bulk-copy operation should be aborted.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaRowsCopiedEventArgs.RowsCopied">
            <summary>
            <para>Gets the number of rows copied during the current bulk-copy operation.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.HanaRowsCopiedEventHandler">
            <summary>
            <para>Represents the method that handles the HanaBulkCopy.HanaRowsCopied event of a HanaBulkCopy.</para>
        </summary><seealso cref="T:Sap.Data.Hana.HanaBulkCopy"/>
        </member>
        <member name="T:Sap.Data.Hana.HanaBulkCopy">
            <summary>
            <para>Efficiently bulk loads an SAP HANA table with data from another source.</para>
        </summary><remarks>
            <para><b>Implements:</b> <see cref="T:System.IDisposable"/></para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopy.#ctor(Sap.Data.Hana.HanaConnection)">
            <summary>
            <para>Initializes a HanaBulkCopy object.</para>
        </summary><param name="connection">
            A HanaConnection object that is used to perform the bulk-copy operation. If the connection is not open, then an exception is thrown in WriteToServer. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopy.#ctor(System.String)">
            <summary>
            <para>Initializes a HanaBulkCopy object.</para>
        </summary><remarks>
            <para>This syntax opens a connection during WriteToServer using connectionString. The connection is closed at the end of WriteToServer.</para>
        </remarks><param name="connectionString">
            The string defining the connection that is opened for use by the HanaBulkCopy instance. A connection string is a semicolon-separated list of keyword=value pairs. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopy.#ctor(System.String,Sap.Data.Hana.HanaBulkCopyOptions)">
            <summary>
            <para>Initializes a HanaBulkCopy object.</para>
        </summary><remarks>
            <para>This syntax opens a connection during WriteToServer using connectionString. The connection is closed at the end of WriteToServer. The copyOptions parameter has the effects described above.</para>
        </remarks><param name="connectionString">
            The string defining the connection that is opened for use by the HanaBulkCopy instance. A connection string is a semicolon-separated list of keyword=value pairs. 
        </param><param name="copyOptions">
            A combination of values from the HanaBulkCopyOptions enumeration that determines which data source rows are copied to the destination table. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopy.#ctor(Sap.Data.Hana.HanaConnection,Sap.Data.Hana.HanaBulkCopyOptions,Sap.Data.Hana.HanaTransaction)">
            <summary>
            <para>Initializes a HanaBulkCopy object.</para>
        </summary><remarks>
        </remarks><param name="connection">
            A HanaConnection object that is used to perform the bulk-copy operation. If the connection is not open, then an exception is thrown in WriteToServer. 
        </param><param name="copyOptions">
            A combination of values from the HanaBulkCopyOptions enumeration that determines which data source rows are copied to the destination table. 
        </param><param name="externalTransaction">
            An existing HanaTransaction instance under which the bulk copy will occur. If externalTransaction is not NULL, then the bulk-copy operation is done within it. It is an error to specify both an external transaction and the UseInternalTransaction option. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopy.Finalize">
            <summary>
            <para>Destructs a HanaBulkCopy object.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopy.Dispose">
            <summary>
            <para>Disposes of the HanaBulkCopy instance.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopy.Close">
            <summary>
            <para>Closes the HanaBulkCopy instance.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopy.WriteToServer(System.Data.DataRow[])">
            <summary>
            <para>Copies all rows in the supplied array of <see cref="T:System.Data.DataRow"/> objects to a destination table specified by the DestinationTableName property of the HanaBulkCopy object.</para>
        </summary><param name="rows">
            An array of System.Data.DataRow objects that is copied to the destination table. 
        </param><seealso cref="P:Sap.Data.Hana.HanaBulkCopy.DestinationTableName"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopy.WriteToServer(System.Data.DataTable)">
            <summary>
            <para>Copies all rows in the supplied <see cref="T:System.Data.DataTable"/> to a destination table specified by the DestinationTableName property of the HanaBulkCopy object.</para>
        </summary><param name="table">
            A System.Data.DataTable whose rows are copied to the destination table. 
        </param><seealso cref="P:Sap.Data.Hana.HanaBulkCopy.DestinationTableName"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopy.WriteToServer(System.Data.IDataReader)">
            <summary>
            <para>Copies all rows in the supplied <see cref="T:System.Data.IDataReader"/> to a destination table specified by the DestinationTableName property of the HanaBulkCopy object.</para>
        </summary><param name="reader">
            A System.Data.IDataReader whose rows are copied to the destination table. 
        </param><seealso cref="P:Sap.Data.Hana.HanaBulkCopy.DestinationTableName"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)">
            <summary>
            <para>Copies all rows in the supplied <see cref="T:System.Data.DataTable"/> with the specified row state to a destination table specified by the DestinationTableName property of the HanaBulkCopy object.</para>
        </summary><remarks>
            <para>Only those rows matching the row state are copied.</para>
        </remarks><param name="table">
            A System.Data.DataTable whose rows are copied to the destination table. 
        </param><param name="rowState">
            A value from the System.Data.DataRowState enumeration. Only rows matching the row state are copied to the destination. 
        </param><seealso cref="P:Sap.Data.Hana.HanaBulkCopy.DestinationTableName"/>
        </member>
        <member name="E:Sap.Data.Hana.HanaBulkCopy.HanaRowsCopied">
            <summary>
            <para>This event occurs every time the number of rows specified by the NotifyAfter property have been processed.</para>
        </summary><remarks>
            <para>The receipt of a HanaRowsCopied event does not imply that any rows have been sent to the SAP HANA database server or committed. You cannot call the Close method from this event.</para>
        </remarks><seealso cref="P:Sap.Data.Hana.HanaBulkCopy.NotifyAfter"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaBulkCopy.BatchSize">
            <summary>
            <para>Gets or sets the number of rows in each batch. At the end of each batch, the rows in the batch are sent to the SAP HANA database server.</para>
        </summary><value> The number of rows in each batch. The default is 0.</value><remarks>
            <para>Setting this property to zero causes all the rows to be sent in one batch.</para>
            <para>Setting this property to a value less than zero is an error.</para>
            <para>If this value is changed while a batch is in progress, then the current batch completes and any further batches use the new value.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaBulkCopy.BulkCopyTimeout">
            <summary>
            <para>Gets or sets the number of seconds for the operation to complete before it times out.</para>
        </summary><value> 
        <para>The default value is 30 seconds.</para>
        </value><remarks>
            <para>A value of zero indicates no limit. This value should be avoided because it may cause an indefinite wait.</para>
            <para>If the operation times out, then all rows in the current transaction are rolled back and a HanaException is raised.</para>
            <para>Setting this property to a value less than zero is an error.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaBulkCopy.ColumnMappings">
            <summary>
            <para>Returns a collection of HanaBulkCopyColumnMapping items. Column mappings define the relationships between columns in the data source and columns in the destination. </para>
        </summary><value>By default, it is an empty collection.</value><remarks>
            <para>The property cannot be modified while WriteToServer is executing.</para>
            <para>If ColumnMappings is empty when WriteToServer is executed, then the first column in the source is mapped to the first column in the destination, the second to the second, and so on. This behavior takes place as long as the column types are convertible, there are at least as many destination columns as source columns, and any extra destination columns are nullable.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaBulkCopy.DestinationTableName">
            <summary>
            <para>Gets or sets the name of the destination table on the SAP HANA database server. </para>
        </summary><value>The default value is a null reference. In Visual Basic it is Nothing.</value><remarks>
            <para>If the value is changed while WriteToServer is executing, then the change has no effect.</para>
            <para>If the value has not been set before a call to WriteToServer, then an InvalidOperationException is raised.</para>
            <para>It is an error to set the value to NULL or the empty string.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaBulkCopy.NotifyAfter">
            <summary>
            <para>Gets or sets the number of rows to be processed before generating a notification event.</para>
        </summary><value>Zero is returned if the property has not been set.</value><remarks>
            <para>Changes made to NotifyAfter, while executing WriteToServer, do not take effect until after the next notification.</para>
            <para>Setting this property to a value less than zero is an error.</para>
            <para>The values of NotifyAfter and BulkCopyTimeout are mutually exclusive, so the event can fire even if no rows have been sent to the database or committed.</para>
        </remarks><seealso cref="P:Sap.Data.Hana.HanaBulkCopy.BulkCopyTimeout"/>
        </member>
        <member name="T:Sap.Data.Hana.HanaBulkCopyColumnMapping">
            <summary>
            <para>Defines the mapping between a column in a HanaBulkCopy instance's data source and a column in the instance's destination table.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMapping.#ctor">
            <summary>
            <para>Creates a new column mapping, using column ordinals or names to refer to source and destination columns.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMapping.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Creates a new column mapping, using column ordinals to refer to source and destination columns.</para>
        </summary><param name="sourceColumnOrdinal">
            The ordinal position of the source column within the data source. The first column in a data source has ordinal position zero. 
        </param><param name="destinationColumnOrdinal">
            The ordinal position of the destination column within the destination table. The first column in a table has ordinal position zero. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMapping.#ctor(System.Int32,System.String)">
            <summary>
            <para>Creates a new column mapping, using a column ordinal to refer to the source column and a column name to refer to the destination column.</para>
        </summary><param name="sourceColumnOrdinal">
            The ordinal position of the source column within the data source. The first column in a data source has ordinal position zero. 
        </param><param name="destinationColumn">
            The name of the destination column within the destination table. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMapping.#ctor(System.String,System.Int32)">
            <summary>
            <para>Creates a new column mapping, using a column name to refer to the source column and a column ordinal to refer to the destination column.</para>
        </summary><param name="sourceColumn">
            The name of the source column within the data source. 
        </param><param name="destinationColumnOrdinal">
            The ordinal position of the destination column within the destination table. The first column in a table has ordinal position zero. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMapping.#ctor(System.String,System.String)">
            <summary>
            <para>Creates a new column mapping, using column names to refer to source and destination columns.</para>
        </summary><param name="sourceColumn">
            The name of the source column within the data source. 
        </param><param name="destinationColumn">
            The name of the destination column within the destination table. 
        </param>
        </member>
        <member name="P:Sap.Data.Hana.HanaBulkCopyColumnMapping.DestinationColumn">
            <summary>
            <para>Gets or sets the name of the column in the destination database table being mapped to.</para>
        </summary><value>A string specifying the name of the column in the destination table or a null reference (Nothing in Visual Basic) if the DestinationOrdinal property has priority.</value><remarks>
            <para>The DestinationColumn property and DestinationOrdinal property are mutually exclusive. The most recently set value takes priority.</para>
            <para>Setting the DestinationColumn property causes the DestinationOrdinal property to be set to -1. Setting the DestinationOrdinal property causes the DestinationColumn property to be set to a null reference (Nothing in Visual Basic).</para>
            <para>It is an error to set DestinationColumn to null or the empty string.</para>
        </remarks><seealso cref="P:Sap.Data.Hana.HanaBulkCopyColumnMapping.DestinationOrdinal"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaBulkCopyColumnMapping.DestinationOrdinal">
            <summary>
            <para>Gets or sets the ordinal value of the column in the destination table being mapped to.</para>
        </summary><value>An integer specifying the ordinal of the column being mapped to in the destination table or -1 if the property is not set.</value><remarks>
            <para>The DestinationColumn property and DestinationOrdinal property are mutually exclusive. The most recently set value takes priority.</para>
            <para>Setting the DestinationColumn property causes the DestinationOrdinal property to be set to -1. Setting the DestinationOrdinal property causes the DestinationColumn property to be set to a null reference (Nothing in Visual Basic).</para>
        </remarks><seealso cref="P:Sap.Data.Hana.HanaBulkCopyColumnMapping.DestinationColumn"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaBulkCopyColumnMapping.SourceColumn">
            <summary>
            <para>Gets or sets the name of the column being mapped in the data source.</para>
        </summary><value>A string specifying the name of the column in the data source or a null reference (Nothing in Visual Basic) if the SourceOrdinal property has priority.</value><remarks>
            <para>The SourceColumn property and SourceOrdinal property are mutually exclusive. The most recently set value takes priority.</para>
            <para>Setting the SourceColumn property causes the SourceOrdinal property to be set to -1. Setting the SourceOrdinal property causes the SourceColumn property to be set to a null reference (Nothing in Visual Basic).</para>
            <para>It is an error to set SourceColumn to null or the empty string.</para>
        </remarks><seealso cref="P:Sap.Data.Hana.HanaBulkCopyColumnMapping.SourceOrdinal"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaBulkCopyColumnMapping.SourceOrdinal">
            <summary>
            <para>Gets or sets ordinal position of the source column within the data source.</para>
        </summary><value>An integer specifying the ordinal of the column in the data source or -1 if the property is not set.</value><remarks>
            <para>The SourceColumn property and SourceOrdinal property are mutually exclusive. The most recently set value takes priority.</para>
            <para>Setting the SourceColumn property causes the SourceOrdinal property to be set to -1. Setting the SourceOrdinal property causes the SourceColumn property to be set to a null reference (Nothing in Visual Basic).</para>
        </remarks><seealso cref="P:Sap.Data.Hana.HanaBulkCopyColumnMapping.SourceColumn"/>
        </member>
        <member name="T:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection">
            <summary>
            <para>A collection of HanaBulkCopyColumnMapping objects that inherits from System.Collections.CollectionBase.</para>
        </summary><remarks>
            <para><b>Implements:</b> <see cref="T:System.Collections.ICollection"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.IList"/></para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection.Add(Sap.Data.Hana.HanaBulkCopyColumnMapping)">
            <summary>
            <para>Adds the specified HanaBulkCopyColumnMapping object to the collection.</para>
        </summary><param name="bulkCopyColumnMapping">
            <para>The HanaBulkCopyColumnMapping object that describes the mapping to be added to the collection.</para>
        </param><seealso cref="T:Sap.Data.Hana.HanaBulkCopyColumnMapping"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection.Add(System.Int32,System.Int32)">
            <summary>
            <para>Creates a new HanaBulkCopyColumnMapping object using ordinals to specify both source and destination columns, and adds the mapping to the collection.</para>
        </summary><param name="sourceColumnOrdinal">
            The ordinal position of the source column within the data source. 
        </param><param name="destinationColumnOrdinal">
            The ordinal position of the destination column within the destination table. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection.Add(System.Int32,System.String)">
            <summary>
            <para>Creates a new HanaBulkCopyColumnMapping object using a column ordinal to refer to the source column and a column name to refer to the destination column, and adds mapping to the collection.</para>
        </summary><param name="sourceColumnOrdinal">
            The ordinal position of the source column within the data source. 
        </param><param name="destinationColumn">
            The name of the destination column within the destination table. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection.Add(System.String,System.Int32)">
            <summary>
            <para>Creates a new HanaBulkCopyColumnMapping object using a column name to refer to the source column and a column ordinal to refer to the destination the column, and adds the mapping to the collection.</para>
            <para>Creates a new column mapping, using column ordinals or names to refer to source and destination columns.</para>
        </summary><param name="sourceColumn">
            The name of the source column within the data source. 
        </param><param name="destinationColumnOrdinal">
            The ordinal position of the destination column within the destination table. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection.Add(System.String,System.String)">
            <summary>
            <para>Creates a new HanaBulkCopyColumnMapping object using column names to specify both source and destination columns, and adds the mapping to the collection.</para>
        </summary><param name="sourceColumn">
            The name of the source column within the data source. 
        </param><param name="destinationColumn">
            The name of the destination column within the destination table. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection.Contains(Sap.Data.Hana.HanaBulkCopyColumnMapping)">
            <summary>
            <para>Gets a value indicating whether a specified HanaBulkCopyColumnMapping object exists in the collection.</para>
        </summary><param name="value">
            <para>A valid HanaBulkCopyColumnMapping object.</para>
        </param><returns>
        <para>True if the specified mapping exists in the collection; false otherwise.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection.CopyTo(Sap.Data.Hana.HanaBulkCopyColumnMapping[],System.Int32)">
            <summary>
            <para>Copies the elements of the HanaBulkCopyColumnMappingCollection to an array of HanaBulkCopyColumnMapping items, starting at a particular index.</para>
        </summary><param name="array">
            The one-dimensional HanaBulkCopyColumnMapping array that is the destination of the elements copied from HanaBulkCopyColumnMappingCollection. The array must have zero-based indexing. 
        </param><param name="index">
            The zero-based index in the array at which copying begins. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection.IndexOf(Sap.Data.Hana.HanaBulkCopyColumnMapping)">
            <summary>
            <para>Gets or sets the index of the specified HanaBulkCopyColumnMapping object within the collection.</para>
        </summary><param name="value">
            The HanaBulkCopyColumnMapping object to search for. 
        </param><returns>
        <para>The zero-based index of the column mapping is returned, or -1 is returned if the column mapping is not found in the collection.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection.Remove(Sap.Data.Hana.HanaBulkCopyColumnMapping)">
            <summary>
            <para>Removes the specified HanaBulkCopyColumnMapping element from the HanaBulkCopyColumnMappingCollection.</para>
        </summary><param name="value">
            The HanaBulkCopyColumnMapping object to be removed from the collection. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the mapping at the specified index from the collection.</para>
        </summary><param name="index">
            The zero-based index of the HanaBulkCopyColumnMapping object to be removed from the collection. 
        </param>
        </member>
        <member name="P:Sap.Data.Hana.HanaBulkCopyColumnMappingCollection.Item(System.Int32)">
            <summary>
            <para>Gets the HanaBulkCopyColumnMapping object at the specified index.</para>
        </summary><param name="index">
            The zero-based index of the HanaBulkCopyColumnMapping object to find. 
        </param><returns>
        <para>A HanaBulkCopyColumnMapping object is returned.</para>
        </returns>
        </member>
        <member name="T:Sap.Data.Hana.HanaBulkCopyOptions">
            <summary>
            <para>A bitwise flag that specifies one or more options to use with an instance of HanaBulkCopy.</para>
        </summary><remarks>
            <para>The HanaBulkCopyOptions enumeration is used when you construct a HanaBulkCopy object to specify how the WriteToServer methods behave.</para>
            <para>The CheckConstraints and KeepNulls options are not supported.</para>
        </remarks><seealso cref="T:Sap.Data.Hana.HanaBulkCopy"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaBulkCopyOptions.Default">
            <summary>
            <para>Specifying only this value causes the default behavior to be used. By default, triggers are enabled.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaBulkCopyOptions.TableLock">
            <summary>
            <para>When specified the table is locked using the command LOCK TABLE table_name WITH HOLD IN SHARE MODE. This lock is in place until the connection is closed.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaBulkCopyOptions.UseInternalTransaction">
            <summary>
            <para>When specified, each batch of the bulk-copy operation is executed within a transaction. When not specified, transaction aren't used. If you indicate this option and also provide a HanaTransaction object to the constructor, then a System.ArgumentException occurs.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.AsyncCommandType">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.AsyncCommandResult">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaCommand">
            <summary>
            <para>A SQL statement or stored procedure that is executed against an SAP HANA database.</para>
        </summary><remarks>
            <para><b>Implements:</b> <see cref="T:System.Data.IDbCommand"/>, <see cref="T:System.ICloneable"/></para>
            <para>For more information, see @olink targetdoc="hanafeatures" targetptr="accessing-hanadotnet-dev"@Data access and manipulation@/olink@.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.#ctor">
            <summary>
            <para>Initializes a HanaCommand object.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.#ctor(System.String)">
            <summary>
            <para>Initializes a HanaCommand object with a SQL string.</para>
        </summary><param name="cmdText">
            The text of the SQL statement or stored procedure. For parameterized statements, use a question mark (?) placeholder to pass parameters. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.#ctor(System.String,Sap.Data.Hana.HanaConnection)">
            <summary>
            <para>Initializes a HanaCommand object with a SQL string for the specified connection.</para>
        </summary><param name="cmdText">
            The text of the SQL statement or stored procedure. For parameterized statements, use a question mark (?) placeholder to pass parameters. 
        </param><param name="connection">
            The HanaConnection object. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.#ctor(System.String,Sap.Data.Hana.HanaConnection,Sap.Data.Hana.HanaTransaction)">
            <summary>
            <para>Initializes a HanaCommand object with a SQL string for the specified connection and transaction.</para>
        </summary><param name="cmdText">
            The text of the SQL statement or stored procedure. For parameterized statements, use a question mark (?) placeholder to pass parameters. 
        </param><param name="connection">
            The HanaConnection object. 
        </param><param name="transaction">
            The HanaTransaction object in which the HanaConnection executes. 
        </param><seealso cref="T:Sap.Data.Hana.HanaTransaction"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.Finalize">
            <summary>
            <para>Destructs a HanaCommand object.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.System#ICloneable#Clone">
            <summary>
            <para>See SqlCommand.Clone at <a href="http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.clone.aspx">http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.clone.aspx</a>.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.Dispose(System.Boolean)">
            <summary>
            <para>Frees the resources associated with the object.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.ResetCommandTimeout">
            <summary>
            <para>Resets the CommandTimeout property to its default value of 30 seconds.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.CreateDbParameter">
            <summary>
            <para>Creates a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object.</para>
        </summary><returns>
	    <para>A <see cref="T:System.Data.Common.DbParameter"/> object.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.CreateParameter">
            <summary>
            <para>Provides a HanaParameter object for supplying parameters to HanaCommand objects.</para>
        </summary><remarks>
            <para>Stored procedures and some other SQL statements can take parameters, indicated in the text of a statement by a question mark (?).</para>
            <para>The CreateParameter method provides a HanaParameter object. Set properties on the HanaParameter to specify the value, data type, and so on for the parameter.</para>
        </remarks><returns>
	    <para>A new parameter, as a HanaParameter object.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameter"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            <para>Executes the command text against the connection.</para>
        </summary><param name="behavior">
            An instance of <see cref="T:System.Data.CommandBehavior"/>. 
        </param><returns>
	    <para>A <see cref="T:System.Data.Common.DbDataReader"/>.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.ExecuteReader">
            <summary>
            <para>Executes a SQL statement that returns a result set.</para>
        </summary><remarks>
            <para>The statement is the current HanaCommand object, with CommandText and Parameters as needed. The HanaDataReader object is a read-only, forward-only result set. For modifiable result sets, use a HanaDataAdapter.</para>
        </remarks><returns>
	    <para>The result set as a HanaDataReader object.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaCommand.ExecuteNonQuery"/><seealso cref="T:Sap.Data.Hana.HanaDataReader"/><seealso cref="T:Sap.Data.Hana.HanaDataAdapter"/><seealso cref="P:Sap.Data.Hana.HanaCommand.CommandText"/><seealso cref="P:Sap.Data.Hana.HanaCommand.Parameters"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            <para>Executes a SQL statement that returns a result set.</para>
        </summary><remarks>
            <para>The statement is the current HanaCommand object, with CommandText and Parameters as needed. The HanaDataReader object is a read-only, forward-only result set. For modifiable result sets, use a HanaDataAdapter.</para>
        </remarks><param name="behavior">
            One of CloseConnection, Default, KeyInfo, SchemaOnly, SequentialAccess, SingleResult, or SingleRow. 
            For more information about this parameter, see the Microsoft .NET Framework documentation for CommandBehavior Enumeration.
        </param><returns>
	    <para>The result set as a HanaDataReader object.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaCommand.ExecuteNonQuery"/><seealso cref="T:Sap.Data.Hana.HanaDataReader"/><seealso cref="T:Sap.Data.Hana.HanaDataAdapter"/><seealso cref="P:Sap.Data.Hana.HanaCommand.CommandText"/><seealso cref="P:Sap.Data.Hana.HanaCommand.Parameters"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.BeginExecuteReader">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement or stored procedure that is described by this HanaCommand, and retrieves one or more result sets from the SAP HANA database server.</para>
        </summary><returns>
	    <para>A <see cref="T:System.IAsyncResult"/> that can be used to poll, wait for results, or both; this value is also needed when invoking EndExecuteReader(IAsyncResult), which returns a HanaDataReader object that can be used to retrieve the returned rows.</para>
        </returns><exception cref="T:Sap.Data.Hana.HanaException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="M:Sap.Data.Hana.HanaCommand.EndExecuteReader(System.IAsyncResult)"/><seealso cref="T:Sap.Data.Hana.HanaDataReader"/><remarks>
            <para>For asynchronous command, the order of parameters must be consistent with CommandText.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.BeginExecuteReader(System.Data.CommandBehavior)">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement or stored procedure that is described by this HanaCommand, and retrieves one or more result sets from the SAP HANA database server.</para>
        </summary><param name="behavior">
            A bitwise combination of <see cref="T:System.Data.CommandBehavior"/> flags describing the results of the query and its effect on the connection. 
        </param><returns>
	    <para>A <see cref="T:System.IAsyncResult"/> that can be used to poll, wait for results, or both; this value is also needed when invoking EndExecuteReader(IAsyncResult), which returns a HanaDataReader object that can be used to retrieve the returned rows.</para>
        </returns><exception cref="T:Sap.Data.Hana.HanaException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="M:Sap.Data.Hana.HanaCommand.EndExecuteReader(System.IAsyncResult)"/><seealso cref="T:Sap.Data.Hana.HanaDataReader"/><remarks>
            <para>For asynchronous command, the order of parameters must be consistent with CommandText.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.BeginExecuteReader(System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement that is described by the HanaCommand object, and retrieves the result set, given a callback procedure and state information.</para>
        </summary><param name="callback">
            A <see cref="T:System.AsyncCallback"/> delegate that is invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callback is required. 
        </param><param name="stateObject">
            A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the <see cref="P:System.IAsyncResult.AsyncState"/> property. 
        </param><returns>
	    <para>A <see cref="T:System.IAsyncResult"/> that can be used to poll, wait for results, or both; this value is also needed when invoking EndExecuteReader(IAsyncResult), which returns a HanaDataReader object that can be used to retrieve the returned rows.</para>
        </returns><exception cref="T:Sap.Data.Hana.HanaException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="M:Sap.Data.Hana.HanaCommand.EndExecuteReader(System.IAsyncResult)"/><seealso cref="T:Sap.Data.Hana.HanaDataReader"/><remarks>
            <para>For asynchronous command, the order of parameters must be consistent with CommandText.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement or stored procedure that is described by this HanaCommand, and retrieves one or more result sets from the SAP HANA database server.</para>
        </summary><param name="callback">
            A <see cref="T:System.AsyncCallback"/> delegate that is invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callback is required. 
        </param><param name="stateObject">
            A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the <see cref="P:System.IAsyncResult.AsyncState"/> property. 
        </param><param name="behavior">
            A bitwise combination of <see cref="T:System.Data.CommandBehavior"/> flags describing the results of the query and its effect on the connection. 
        </param><returns>
	    <para>A <see cref="T:System.IAsyncResult"/> that can be used to poll, wait for results, or both; this value is also needed when invoking EndExecuteReader(IAsyncResult), which returns a HanaDataReader object that can be used to retrieve the returned rows.</para>
        </returns><exception cref="T:Sap.Data.Hana.HanaException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="M:Sap.Data.Hana.HanaCommand.EndExecuteReader(System.IAsyncResult)"/><seealso cref="T:Sap.Data.Hana.HanaDataReader"/><remarks>
            <para>For asynchronous command, the order of parameters must be consistent with CommandText.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.EndExecuteReader(System.IAsyncResult)">
            <summary>
            <para>Finishes asynchronous execution of a SQL statement or stored procedure, returning the requested HanaDataReader.</para>
        </summary><remarks>
            <para>Call EndExecuteReader once for every call to BeginExecuteReader. The call must be after BeginExecuteReader has returned. Microsoft ADO.NET is not thread safe; it is your responsibility to ensure that BeginExecuteReader has returned. The IAsyncResult passed to EndExecuteReader must be the same as the one returned from the BeginExecuteReader call that is being completed. It is an error to call EndExecuteReader to end a call to BeginExecuteNonQuery, and vice versa.</para>
            <para>If an error occurs while executing the command, then the exception is thrown when EndExecuteReader is called.</para>
            <para>There are four ways to wait for execution to complete:</para>
            <para>(1) Call EndExecuteReader.</para>
	    <para>Calling EndExecuteReader blocks until the command completes. For example:</para>
            <code>HanaConnection conn = new HanaConnection(
    "Server=hana-db:30015;UserID=JSmith;Password=secret");
conn.Open();
HanaCommand cmd = new HanaCommand( "SELECT * FROM Departments", conn );
IAsyncResult res = cmd.BeginExecuteReader();
// perform other work
// this blocks until the command completes
HanaDataReader reader = cmd.EndExecuteReader( res );</code>
            <para>(2) Poll the IsCompleted property of the IAsyncResult.</para>
	    <para>For example:</para>
            <code>HanaConnection conn = new HanaConnection(
    "Server=hana-db:30015;UserID=JSmith;Password=secret");
conn.Open();
HanaCommand cmd = new HanaCommand( "SELECT * FROM Departments", conn );
IAsyncResult res = cmd.BeginExecuteReader();
while( !res.IsCompleted ) {
    // do other work
}
// this does not block because the command is finished
HanaDataReader reader = cmd.EndExecuteReader( res );</code>
            <para>(3) Use the IAsyncResult.AsyncWaitHandle property to get a synchronization object.</para>
	    <para>Use the IAsyncResult.AsyncWaitHandle property to get a synchronization object, and wait on that. For example:</para>
            <code>HanaConnection conn = new HanaConnection(
    "Server=hana-db:30015;UserID=JSmith;Password=secret");
conn.Open();
HanaCommand cmd = new HanaCommand( "SELECT * FROM Departments", conn );
IAsyncResult res = cmd.BeginExecuteReader();
// perform other work
WaitHandle wh = res.AsyncWaitHandle;
wh.WaitOne();
// this does not block because the command is finished
HanaDataReader reader = cmd.EndExecuteReader( res );</code>
            <para>(4) Specify a callback function when calling BeginExecuteReader</para>
	    <para>For example:</para>
            <code>private void callbackFunction( IAsyncResult ar ) {
    HanaCommand cmd = (HanaCommand) ar.AsyncState;
    // this does not block since the command has completed
    HanaDataReader reader = cmd.EndExecuteReader();
}

// elsewhere in the code
private void DoStuff() {
    HanaConnection conn = new HanaConnection(
        "Server=hana-db:30015;UserID=JSmith;Password=secret");
    conn.Open();
    HanaCommand cmd = new HanaCommand( "SELECT * FROM Departments", conn );
    IAsyncResult res = cmd.BeginExecuteReader( callbackFunction, cmd );
    // perform other work.  The callback function is 
    // called when the command completes
}</code>
            <para>The callback function executes in a separate thread, so the usual caveats related to updating the user interface in a threaded program apply.</para>




        </remarks><param name="asyncResult">
            The IAsyncResult returned by the call to HanaCommand.BeginExecuteReader. 
        </param><returns>
	    <para>A HanaDataReader object that can be used to retrieve the requested rows (the same behavior as HanaCommand.ExecuteReader).</para>
        </returns><exception cref="T:System.ArgumentException">
            <para>The asyncResult parameter is null (Nothing in Visual Basic)</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The HanaCommand.EndExecuteReader(IAsyncResult) was called more than once for a single command execution, or the method was mismatched against its execution method.</para>
        </exception><seealso cref="M:Sap.Data.Hana.HanaCommand.BeginExecuteReader"/><seealso cref="T:Sap.Data.Hana.HanaDataReader"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.Prepare">
            <summary>
            <para>Prepares or compiles the HanaCommand on the data source.</para>
        </summary><remarks>
            <para>If you call one of the ExecuteNonQuery, ExecuteReader, or ExecuteScalar methods after calling Prepare, then any parameter value that is larger than the value specified by the Size property is automatically truncated to the original specified size of the parameter, and no truncation errors are returned.</para>
            <para>The truncation only happens for the following data types:</para>
            <list>
            <item>
            <term>VARCHAR</term> 
            </item>
            <item>
            <term>NVARCHAR</term> 
            </item>
            <item>
            <term>ALPHANUM</term> 
            </item>
            <item>
            <term>SHORTTEXT</term> 
            </item>
            <item>
            <term>VARBINARY</term> 
            </item>
            <item>
            <term>BLOB</term> 
            </item>
            <item>
            <term>CLOB</term> 
            </item>
            <item>
            <term>NCLOB</term> 
            </item>
            <item>
            <term>TEXT</term> 
            </item>
            </list>
            <para>If the Size property is not specified, then the default value is used and the data is not truncated.</para>
        </remarks><seealso cref="M:Sap.Data.Hana.HanaCommand.ExecuteNonQuery"/><seealso cref="M:Sap.Data.Hana.HanaCommand.ExecuteReader"/><seealso cref="M:Sap.Data.Hana.HanaCommand.ExecuteScalar"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.ExecuteNonQuery">
            <summary>
            <para>Executes a statement that does not return a result set, such as an INSERT, UPDATE, DELETE, or data definition statement.</para>
        </summary><remarks>
            <para>Use ExecuteNonQuery to change the data in a database without using a DataSet. Do this by executing UPDATE, INSERT, or DELETE statements.</para>
            <para>Although ExecuteNonQuery does not return any rows, output parameters or return values that are mapped to parameters are populated with data.</para>
            <para>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, and for rollbacks, the return value is -1.</para>
        </remarks><returns>
	    <para>The number of rows affected.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaCommand.ExecuteReader"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.BeginExecuteNonQuery">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement or stored procedure that is described by this HanaCommand.</para>
        </summary><returns>
	    <para>A <see cref="T:System.IAsyncResult"/> that can be used to poll, wait for results, or both; this value is also needed when invoking EndExecuteNonQuery(IAsyncResult), which returns the number of affected rows.</para>
        </returns><exception cref="T:Sap.Data.Hana.HanaException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="M:Sap.Data.Hana.HanaCommand.EndExecuteNonQuery(System.IAsyncResult)"/><remarks>
            <para>For asynchronous command, the order of parameters must be consistent with CommandText.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a SQL statement or stored procedure that is described by this HanaCommand, given a callback procedure and state information.</para>
        </summary><param name="callback">
            A <see cref="T:System.AsyncCallback"/> delegate that is invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callback is required. 
        </param><param name="stateObject">
            A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the <see cref="P:System.IAsyncResult.AsyncState"/> property. 
        </param><returns>
	    <para>A <see cref="T:System.IAsyncResult"/> that can be used to poll, wait for results, or both; this value is also needed when invoking EndExecuteNonQuery(IAsyncResult), which returns the number of affected rows.</para>
        </returns><exception cref="T:Sap.Data.Hana.HanaException">
            <para>Any error that occurred while executing the command text.</para>
        </exception><seealso cref="M:Sap.Data.Hana.HanaCommand.EndExecuteNonQuery(System.IAsyncResult)"/><remarks>
            <para>For asynchronous command, the order of parameters must be consistent with CommandText.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.EndExecuteNonQuery(System.IAsyncResult)">
            <summary>
            <para>Finishes asynchronous execution of a SQL statement or stored procedure.</para>
        </summary><remarks>
            <para>Call EndExecuteNonQuery once for every call to BeginExecuteNonQuery. The call must be after BeginExecuteNonQuery has returned. Microsoft ADO.NET is not thread safe; it is your responsibility to ensure that BeginExecuteNonQuery has returned. The IAsyncResult passed to EndExecuteNonQuery must be the same as the one returned from the BeginExecuteNonQuery call that is being completed. It is an error to call EndExecuteNonQuery to end a call to BeginExecuteReader, and vice versa.</para>
            <para>If an error occurs while executing the command, then the exception is thrown when EndExecuteNonQuery is called.</para>
            <para>There are four ways to wait for execution to complete:</para>
            <para>(1) Call EndExecuteNonQuery.</para>
	    <para>Calling EndExecuteNonQuery blocks until the command completes. For example:</para>
            <code>HanaConnection conn = new HanaConnection(
    "Server=hana-db:30015;UserID=JSmith;Password=secret");
conn.Open();
HanaCommand cmd = new HanaCommand( 
    "UPDATE Departments"
        + " SET DepartmentName = 'Engineering'"
        + " WHERE DepartmentID=100",
    conn );
IAsyncResult res = cmd.BeginExecuteNonQuery();
// perform other work
// this will block until the command completes
int rowCount = cmd.EndExecuteNonQuery( res );</code>
            <para>(2) Poll the IsCompleted property of the IAsyncResult.</para>
	    <para>For example:</para>
            <code>HanaConnection conn = new HanaConnection(
    "Server=hana-db:30015;UserID=JSmith;Password=secret");
conn.Open();
HanaCommand cmd = new HanaCommand( 
    "UPDATE Departments"
        + " SET DepartmentName = 'Engineering'"
        + " WHERE DepartmentID=100",
    conn );
IAsyncResult res = cmd.BeginExecuteNonQuery();
while( !res.IsCompleted ) {
    // do other work
}
// this will not block because the command is finished
int rowCount = cmd.EndExecuteNonQuery( res );</code>
            <para>(3) Use the IAsyncResult.AsyncWaitHandle property to get a synchronization object, and wait on that.</para>
	    <para>For example:</para>
            <code>HanaConnection conn = new HanaConnection(
    "Server=hana-db:30015;UserID=JSmith;Password=secret");
conn.Open();
HanaCommand cmd = new HanaCommand( 
    "UPDATE Departments"
        + " SET DepartmentName = 'Engineering'"
        + " WHERE DepartmentID=100",
    conn );
IAsyncResult res = cmd.BeginExecuteNonQuery();
// perform other work
WaitHandle wh = res.AsyncWaitHandle;
wh.WaitOne();
// this will not block because the command is finished
int rowCount = cmd.EndExecuteNonQuery( res );</code>
            <para>(4) Specify a callback function when calling BeginExecuteNonQuery.</para>
	    <para>For example:</para>
            <code>private void callbackFunction( IAsyncResult ar ) {
    HanaCommand cmd = (HanaCommand) ar.AsyncState;
    // this won't block since the command has completed
    int rowCount = cmd.EndExecuteNonQuery( ar );
}

// elsewhere in the code
private void DoStuff() {
    HanaConnection conn = new HanaConnection(
	"Server=hana-db:30015;UserID=JSmith;Password=secret");
    conn.Open();
    HanaCommand cmd = new HanaCommand(
        "UPDATE Departments"
            + " SET DepartmentName = 'Engineering'"
            + " WHERE DepartmentID=100",
        conn );
    IAsyncResult res = cmd.BeginExecuteNonQuery( callbackFunction, cmd );
    // perform other work.  The callback function is
    // called when the command completes
}</code>
            <para>The callback function executes in a separate thread, so the usual caveats related to updating the user interface in a threaded program apply.</para>




        </remarks><param name="asyncResult">
            The IAsyncResult returned by the call to HanaCommand.BeginExecuteNonQuery. 
        </param><returns>
	    <para>The number of rows affected (the same behavior as HanaCommand.ExecuteNonQuery).</para>
        </returns><exception cref="T:System.ArgumentException">
            <para>The asyncResult parameter is null (Nothing in Visual Basic).</para>
        </exception><exception cref="T:System.InvalidOperationException">
            <para>The HanaCommand.EndExecuteNonQuery(IAsyncResult) was called more than once for a single command execution, or the method was mismatched against its execution method.</para>
        </exception><seealso cref="M:Sap.Data.Hana.HanaCommand.BeginExecuteNonQuery"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.ExecuteScalar">
            <summary>
            <para>Executes a statement that returns a single value. If this method is called on a query that returns multiple rows and columns, then only the first column of the first row is returned.</para>
        </summary><returns>
	    <para>The first column of the first row in the result set, or a null reference if the result set is empty.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommand.Cancel">
            <summary>
            <para>Cancels the execution of a HanaCommand object.</para>
        </summary><remarks>
            <para>If there is nothing to cancel, then nothing happens. If there is a command in process, then a "Statement interrupted by user" exception is thrown.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaCommand.CommandText">
            <summary>
            <para>Gets or sets the text of a SQL statement or stored procedure.</para>
        </summary><value>The SQL statement or the name of the stored procedure to execute. The default is an empty string.</value><seealso cref="M:Sap.Data.Hana.HanaCommand.#ctor"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaCommand.CommandTimeout">
            <summary>
            <para>This feature is not supported by the data provider.</para>
        </summary>	
        </member>
        <member name="P:Sap.Data.Hana.HanaCommand.CommandType">
            <summary>
            <para>Gets or sets the type of command represented by a HanaCommand.</para>
        </summary><value>One of the <see cref="T:System.Data.CommandType"/> values. The default is <see cref="F:System.Data.CommandType.Text"/>.</value><remarks>
            <para>Supported command types are as follows:</para>
            <list type="bullet">
            <item>
            <term><see cref="F:System.Data.CommandType.StoredProcedure"/></term> When you specify this CommandType, the command text must be the name of a stored procedure and you must supply any arguments as HanaParameter objects. 
            </item>
            <item>
            <term><see cref="F:System.Data.CommandType.Text"/></term> This is the default value. 
            </item>
            </list>
            <para>When the CommandType property is set to StoredProcedure, the CommandText property should be set to the name of the stored procedure. The command executes this stored procedure when you call one of the Execute methods.</para>
            <para>Use a question mark (?) placeholder to pass parameters. For example:</para>
            <code>SELECT * FROM Customers WHERE ID = ?</code>
            <para>The order in which HanaParameter objects are added to the HanaParameterCollection must directly correspond to the position of the question mark placeholder for the parameter.</para>

        </remarks>	
        </member>
        <member name="P:Sap.Data.Hana.HanaCommand.DbConnection">
            <summary>
            <para>Gets or sets the <see cref="T:System.Data.Common.DbConnection"/> used by this HanaCommand object.</para>
        </summary><returns>
	    <para>The connection to the data source.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaCommand"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaCommand.Connection">
            <summary>
            <para>Gets or sets the connection object to which the HanaCommand object applies.</para>
        </summary><value>The default value is a null reference. In Visual Basic it is Nothing.</value>
        </member>
        <member name="P:Sap.Data.Hana.HanaCommand.DesignTimeVisible">
            <summary>
            <para>Gets or sets a value that indicates if the HanaCommand should be visible in a Windows Form Designer control. The default is true.</para>
        </summary><value>True if this HanaCommand instance should be visible, false if this instance should not be visible. The default is false.</value>
        </member>
        <member name="P:Sap.Data.Hana.HanaCommand.DbParameterCollection">
            <summary>
            <para>Gets the collection of <see cref="T:System.Data.Common.DbParameter"/> objects.</para>
        </summary><returns>
	    <para>The parameters of the SQL statement or stored procedure.</para>
        </returns>
        </member>
        <member name="P:Sap.Data.Hana.HanaCommand.Parameters">
            <summary>
            <para>Specifies a collection of parameters for the current statement. Use question marks in the CommandText to indicate parameters.</para>
        </summary><value>The parameters of the SQL statement or stored procedure. The default value is an empty collection.</value><remarks>
            <para>When CommandType is set to Text, pass parameters using the question mark placeholder. For example:</para>
            <code>SELECT * FROM Customers WHERE ID = ?</code>
            <para>The order in which HanaParameter objects are added to the HanaParameterCollection must directly correspond to the position of the question mark placeholder for the parameter in the command text.</para>
            <para>When the parameters in the collection do not match the requirements of the query to be executed, an error may result or an exception may be thrown.</para>

        </remarks><seealso cref="T:Sap.Data.Hana.HanaParameterCollection"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaCommand.DbTransaction">
            <summary>
            <para>Gets or sets the <see cref="T:System.Data.Common.DbTransaction"/> within which this HanaCommand object executes.</para>
        </summary><returns>
	    <para>The transaction within which a Command object of a data provider executes. The default value is a null reference (Nothing in Visual Basic).</para>
        </returns>
        </member>
        <member name="P:Sap.Data.Hana.HanaCommand.Transaction">
            <summary>
            <para>Specifies the HanaTransaction object in which the HanaCommand executes.</para>
        </summary><value>The default value is a null reference. In Visual Basic, this is Nothing.</value><remarks>
            <para>You cannot set the Transaction property if it is already set to a specific value and the command is executing. If you set the transaction property to a HanaTransaction object that is not connected to the same HanaConnection object as the HanaCommand object, then an exception is thrown the next time that you attempt to execute a statement.</para>
            <para>For more information, see @olink targetdoc="hanafeatures" targetptr="transaction-hanadotnet-development"@Transaction processing@/olink@.</para>
        </remarks><seealso cref="T:Sap.Data.Hana.HanaTransaction"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaCommand.UpdatedRowSource">
            <summary>
            <para>Gets or sets how command results are applied to the DataRow when used by the Update method of the HanaDataAdapter.</para>
        </summary><value> 
	<para>One of the UpdatedRowSource values. The default value is UpdateRowSource.OutputParameters. If the command is automatically generated, then this property is UpdateRowSource.None.</para>
        </value><remarks>
	    <para>UpdatedRowSource.Both, which returns both resultset and output parameters, is not supported.</para>
	</remarks>	
        </member>
        <member name="T:Sap.Data.Hana.HanaCommandBuilder">
            <summary>
            <para>A way to generate single-table SQL statements that reconcile changes made to a DataSet with the data in the associated database.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.#ctor">
            <summary>
            <para>Initializes a HanaCommandBuilder object.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.#ctor(Sap.Data.Hana.HanaDataAdapter)">
            <summary>
            <para>Initializes a HanaCommandBuilder object.</para>
        </summary><remarks>
        </remarks><param name="adapter">
            A HanaDataAdapter object for which to generate reconciliation statements. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.GetInsertCommand(System.Boolean)">
            <summary>
            <para>Returns the generated HanaCommand object that performs INSERT operations on the database when an Update is called.</para>
        </summary><remarks>
            <para>The GetInsertCommand method returns the HanaCommand object to be executed, so it is useful for informational or troubleshooting purposes.</para>
            <para>Alternatively, use GetInsertCommand as the basis of a modified command. For example, you might call GetInsertCommand and modify the CommandTimeout value, and then explicitly set that value on the HanaDataAdapter.</para>
            <para>SQL statements are first generated either when the application calls Update or GetInsertCommand. After the SQL statement is first generated, the application must explicitly call RefreshSchema if it changes the statement in any way. Otherwise, the GetInsertCommand continues to use information from the previous statement, which might not be correct.</para>
        </remarks><param name="useColumnsForParameterNames">
            If true, then generate parameter names matching column names if possible. If false, then generate @p1, @p2, and so on. 
        </param><returns>
	    <para>The automatically generated HanaCommand object required to perform insertions.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaCommandBuilder.GetDeleteCommand"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.GetInsertCommand">
            <summary>
            <para>Returns the generated HanaCommand object that performs INSERT operations on the database when an Update is called.</para>
        </summary><remarks>
            <para>The GetInsertCommand method returns the HanaCommand object to be executed, so it is useful for informational or troubleshooting purposes.</para>
            <para>Alternatively, use GetInsertCommand as the basis of a modified command. For example, you might call GetInsertCommand and modify the CommandTimeout value, and then explicitly set that value on the HanaDataAdapter.</para>
            <para>SQL statements are first generated either when the application calls Update or GetInsertCommand. After the SQL statement is first generated, the application must explicitly call RefreshSchema if it changes the statement in any way. Otherwise, the GetInsertCommand continues to use information from the previous statement, which might not be correct.</para>
        </remarks><returns>
	    <para>The automatically generated HanaCommand object required to perform insertions.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaCommandBuilder.GetDeleteCommand"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.GetDeleteCommand(System.Boolean)">
            <summary>
            <para>Returns the generated HanaCommand object that performs DELETE operations on the database when HanaDataAdapter.Update is called.</para>
        </summary><remarks>
            <para>The GetDeleteCommand method returns the HanaCommand object to be executed, so it is useful for informational or troubleshooting purposes.</para>
            <para>Alternatively, use GetDeleteCommand as the basis of a modified command. For example, you might call GetDeleteCommand and modify the CommandTimeout value, and then explicitly set that value on the HanaDataAdapter.</para>
            <para>SQL statements are first generated when the application calls Update or GetDeleteCommand. After the SQL statement is first generated, the application must explicitly call RefreshSchema if it changes the statement in any way. Otherwise, the GetDeleteCommand continues to use information from the previous statement.</para>
        </remarks><param name="useColumnsForParameterNames">
            If true, then generate parameter names matching column names if possible. If false, then generate @p1, @p2, and so on. 
        </param><returns>
	    <para>The automatically generated HanaCommand object required to perform deletions.</para>
        </returns><seealso cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.GetDeleteCommand">
            <summary>
            <para>Returns the generated HanaCommand object that performs DELETE operations on the database when HanaDataAdapter.Update is called.</para>
        </summary><remarks>
            <para>The GetDeleteCommand method returns the HanaCommand object to be executed, so it is useful for informational or troubleshooting purposes.</para>
            <para>Alternatively, use GetDeleteCommand as the basis of a modified command. For example, you might call GetDeleteCommand and modify the CommandTimeout value, and then explicitly set that value on the HanaDataAdapter.</para>
            <para>SQL statements are first generated when the application calls Update or GetDeleteCommand. After the SQL statement is first generated, the application must explicitly call RefreshSchema if it changes the statement in any way. Otherwise, the GetDeleteCommand continues to use information from the previous statement.</para>
        </remarks><returns>
	    <para>The automatically generated HanaCommand object required to perform deletions.</para>
        </returns><seealso cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.GetUpdateCommand(System.Boolean)">
            <summary>
            <para>Returns the generated HanaCommand object that performs UPDATE operations on the database when an Update is called.</para>
        </summary><remarks>
            <para>The GetUpdateCommand method returns the HanaCommand object to be executed, so it is useful for informational or troubleshooting purposes.</para>
            <para>Alternatively, use GetUpdateCommand as the basis of a modified command. For example, you might call GetUpdateCommand and modify the CommandTimeout value, and then explicitly set that value on the HanaDataAdapter.</para>
            <para>SQL statements are first generated when the application calls Update or GetUpdateCommand. After the SQL statement is first generated, the application must explicitly call RefreshSchema if it changes the statement in any way. Otherwise, the GetUpdateCommand continues to use information from the previous statement, which might not be correct.</para>
        </remarks><param name="useColumnsForParameterNames">
            If true, then generate parameter names matching column names if possible. If false, then generate @p1, @p2, and so on. 
        </param><returns>
	    <para>The automatically generated HanaCommand object required to perform updates.</para>
        </returns><seealso cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.GetUpdateCommand">
            <summary>
            <para>Returns the generated HanaCommand object that performs UPDATE operations on the database when an Update is called.</para>
        </summary><remarks>
            <para>The GetUpdateCommand method returns the HanaCommand object to be executed, so it is useful for informational or troubleshooting purposes.</para>
            <para>Alternatively, use GetUpdateCommand as the basis of a modified command. For example, you might call GetUpdateCommand and modify the CommandTimeout value, and then explicitly set that value on the HanaDataAdapter.</para>
            <para>SQL statements are first generated when the application calls Update or GetUpdateCommand. After the SQL statement is first generated, the application must explicitly call RefreshSchema if it changes the statement in any way. Otherwise, the GetUpdateCommand continues to use information from the previous statement, which might not be correct.</para>
        </remarks><returns>
	    <para>The automatically generated HanaCommand object required to perform updates.</para>
        </returns><seealso cref="M:System.Data.Common.DbCommandBuilder.RefreshSchema"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
            <summary>
            <para>Allows the provider implementation of <see cref="T:System.Data.Common.DbCommandBuilder"/> to handle additional parameter properties.</para>
        </summary><param name="parameter">
            A <see cref="T:System.Data.Common.DbParameter"/> to which the additional modifications are applied. 
        </param><param name="row">
            The <see cref="T:System.Data.DataRow"/> from the schema table provided by HanaDataReader.GetSchemaTable. 
        </param><param name="statementType">
            The type of command being generated: INSERT, UPDATE or DELETE. 
        </param><param name="whereClause">
            The value is true if the parameter is part of the UPDATE or DELETE WHERE clause, and false if it is part of the INSERT or UPDATE values. 
        </param><seealso cref="M:Sap.Data.Hana.HanaDataReader.GetSchemaTable"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
            <summary>
            <para>Returns the schema table for the HanaCommandBuilder object.</para>
        </summary><param name="sourceCommand">
            The <see cref="T:System.Data.Common.DbCommand"/> for which to retrieve the corresponding schema table. 
        </param><returns>
	    <para>A <see cref="T:System.Data.DataTable"/> that represents the schema for the specific <see cref="T:System.Data.Common.DbCommand"/>.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaCommandBuilder"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
            <summary>
            <para>Resets the <see cref="P:System.Data.Common.DbCommand.CommandTimeout"/>, <see cref="P:System.Data.Common.DbCommand.Transaction"/>, <see cref="P:System.Data.Common.DbCommand.CommandType"/>, and <see cref="P:System.Data.Common.DbCommand.UpdatedRowSource"/> properties on the <see cref="T:System.Data.Common.DbCommand"/>.</para>
        </summary><param name="command">
            The <see cref="T:System.Data.Common.DbCommand"/> to be used by the command builder for the corresponding insert, update, or delete command. 
        </param><returns>
	    <para>A <see cref="T:System.Data.Common.DbCommand"/> instance to use for each insert, update, or delete operation. Passing a null value allows the InitializeCommand method to create a <see cref="T:System.Data.Common.DbCommand"/> object based on the SELECT statement associated with the HanaCommandBuilder object.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaCommandBuilder"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.GetParameterName(System.Int32)">
            <summary>
            <para>Returns the name of the specified parameter in the format of @p#. Use when building a custom command builder.</para>
        </summary><param name="index">
            The number to be included as part of the parameter's name. 
        </param><returns>
	    <para>The name of the parameter with the specified number appended as part of the parameter name.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.GetParameterName(System.String)">
            <summary>
            <para>Returns the full parameter name, given the partial parameter name.</para>
        </summary><param name="parameterName">
            The partial name of the parameter. 
        </param><returns>
	    <para>The full parameter name corresponding to the partial parameter name requested.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.GetParameterPlaceholder(System.Int32)">
            <summary>
            <para>Returns the placeholder for the parameter in the associated SQL statement.</para>
        </summary><param name="index">
            The number to be included as part of the parameter's name. 
        </param><returns>
	    <para>The name of the parameter with the specified number appended.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
            <summary>
            <para>Registers the HanaCommandBuilder object to handle the HanaDataAdapter.RowUpdating event for a HanaDataAdapter object.</para>
        </summary><param name="adapter">
            The HanaDataAdapter object to be used for the update. 
        </param><seealso cref="T:Sap.Data.Hana.HanaCommandBuilder"/><seealso cref="T:Sap.Data.Hana.HanaDataAdapter"/><seealso cref="E:Sap.Data.Hana.HanaDataAdapter.RowUpdating"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.DeriveParameters(Sap.Data.Hana.HanaCommand)">
            <summary>
            <para>Populates the Parameters collection of the specified HanaCommand object. This method is used for the stored procedure specified in the HanaCommand.</para>
        </summary><remarks>
            <para>DeriveParameters overwrites any existing parameter information for the HanaCommand.</para>
            <para>DeriveParameters requires an extra call to the SAP HANA database server. If the parameter information is known in advance, then it is more efficient to populate the Parameters collection by setting the information explicitly.</para>
        </remarks><param name="command">
            A HanaCommand object for which to derive parameters. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.QuoteIdentifier(System.String)">
            <summary>
			<para>Returns the correct quoted form of an unquoted identifier, including properly escaping any embedded quotes in the identifier.</para>
		</summary><param name="unquotedIdentifier">
			The string representing the unquoted identifier that will have to be quoted.
		</param><returns>
			<para>Returns a string representing the quoted form of an unquoted identifier with embedded quotes properly escaped.</para>
		</returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>
            <para>Returns the correct unquoted form of a quoted identifier, including properly un-escaping any embedded quotes in the identifier.</para>
        </summary><param name="quotedIdentifier">
            The string representing the quoted identifier that will have its embedded quotes removed.
        </param><returns>
	    <para>Returns a string representing the unquoted form of a quoted identifier with embedded quotes properly un-escaped.</para>
        </returns>
        </member>
        <member name="P:Sap.Data.Hana.HanaCommandBuilder.DataAdapter">
            <summary>
            <para>Specifies the HanaDataAdapter for which to generate statements.</para>
        </summary><value>A HanaDataAdapter object.</value><remarks>
            <para>When you create a new instance of HanaCommandBuilder, any existing HanaCommandBuilder that is associated with this HanaDataAdapter is released.</para>
        </remarks>
        </member>
        <member name="T:Sap.Data.Hana.HanaMetaDataCollectionNames">
            <summary>
            <para>Provides a list of constants for use with the HanaConnection.GetSchema(string) method to retrieve metadata collections.</para>
        </summary><remarks>
            <para>This field is constant and read-only.</para>
        </remarks><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaMetaDataCollectionNames.#cctor">
            <summary>
            <para>Initializes a HanaMetaDataCollectionNames object.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.Columns">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the Columns collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the Columns collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.Columns );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.DataSourceInformation">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the DataSourceInformation collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the DataSourceInformation collection.</para>
            <code>DataTable schema = 
    GetSchema( HanaMetaDataCollectionNames.DataSourceInformation );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.DataTypes">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the DataTypes collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the DataTypes collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.DataTypes );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.ForeignKeys">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the ForeignKeys collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the ForeignKeys collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.ForeignKeys );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.IndexColumns">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the IndexColumns collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the IndexColumns collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.IndexColumns );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.Indexes">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the Indexes collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the Indexes collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.Indexes );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.MetaDataCollections">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the MetaDataCollections collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the MetaDataCollections collection.</para>
            <code>DataTable schema = 
    GetSchema( HanaMetaDataCollectionNames.MetaDataCollections );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.ProcedureParameters">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the ProcedureParameters collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the ProcedureParameters collection.</para>
            <code>DataTable schema = 
    GetSchema( HanaMetaDataCollectionNames.ProcedureParameters );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.Procedures">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the Procedures collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the Procedures collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.Procedures );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.ReservedWords">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the ReservedWords collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the ReservedWords collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.ReservedWords );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.Restrictions">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the Restrictions collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the Restrictions collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.Restrictions );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.Tables">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the Tables collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the Tables collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.Tables );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.Users">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the Users collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the Users collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.Users );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.ViewColumns">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the ViewColumns collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the ViewColumns collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.ViewColumns );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="F:Sap.Data.Hana.HanaMetaDataCollectionNames.Views">
            <summary>
            <para>Provides a constant for use with the HanaConnection.GetSchema(string) method that represents the Views collection.</para>
        </summary><example>
            <para>The following code fills a DataTable with the Views collection.</para>
            <code>DataTable schema = GetSchema( HanaMetaDataCollectionNames.Views );</code>
        </example><seealso cref="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)"/>
        </member>
        <member name="T:Sap.Data.Hana.HanaConnectionOptions">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaInternalConnection">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaConnectionGroup">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaConnectionPool">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaConnectionPoolManager">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaInfoMessageDelegate">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaInfoMessageEventArgs">
            <summary>
            <para>Provides data for the InfoMessage event.</para>
        </summary><remarks>
            <para>There is no constructor for HanaInfoMessageEventArgs.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaInfoMessageEventArgs.ToString">
            <summary>
            <para>Retrieves a string representation of the InfoMessage event.</para>
        </summary><returns>
	    <para>A string representing the InfoMessage event.</para>
        </returns>
        </member>
        <member name="P:Sap.Data.Hana.HanaInfoMessageEventArgs.MessageType">
            <summary>
            <para>Returns the type of the message. This can be one of: Action, Info, Status, or Warning.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaInfoMessageEventArgs.Errors">
            <summary>
            <para>Returns the collection of messages sent from the data source.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaInfoMessageEventArgs.Message">
            <summary>
            <para>Returns the full text of the error sent from the data source.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaInfoMessageEventArgs.Source">
            <summary>
            <para>Returns the name of the data provider.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaInfoMessageEventArgs.NativeError">
            <summary>
            <para>Returns the SQLCODE returned by the SAP HANA database server.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.HanaInfoMessageEventHandler">
            <summary>
            <para>Represents the method that handles the HanaConnection.InfoMessage event of a HanaConnection object.</para>
        </summary><seealso cref="T:Sap.Data.Hana.HanaConnection"/><seealso cref="E:Sap.Data.Hana.HanaConnection.InfoMessage"/>
        </member>
        <member name="T:Sap.Data.Hana.HanaConnection">
            <summary>
   <para>Represents a connection to an SAP HANA database.</para>
  </summary><remarks>
   <para>For a list of connection parameters, see @olink targetdoc="hanafeatures" targetptr="hf-dotnet-dev-conn-parms"@Connection parameters@/olink@.</para>
  </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.#ctor">
            <summary>
   <para>Initializes a HanaConnection object. The connection must be opened before you can perform any operations against the database.</para>
  </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.#ctor(System.String)">
            <summary>
   <para>Initializes a HanaConnection object. The connection must then be opened before you can perform any operations against the database.</para>
  </summary><param name="connectionString"> A SAP HANA connection string. A connection string is a semicolon-separated list of keyword=value pairs. For a list of connection parameters, see @olink targetdoc="hanafeatures" targetptr="hf-dotnet-dev-conn-parms"@Connection parameters@/olink@. </param><example>
   <para>The following statement initializes a HanaConnection object for a connection to an SAP HANA database server named HumanResources. The connection uses the user ID Admin and the password Money123.</para>
   <code>HanaConnection conn = new HanaConnection( 
    "UserID=Admin;Password=Money123;Server=HumanResources:30015" ); 
conn.Open();</code>
  </example><seealso cref="T:Sap.Data.Hana.HanaConnection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.Close">
            <summary>
   <para>Closes a database connection.</para>
  </summary><remarks>
   <para>The Close method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled. If Close is called while handling a StateChange event, then no additional StateChange events are fired. An application can call Close multiple times.</para>
  </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.Dispose(System.Boolean)">
            <summary>
   <para>Frees the resources associated with the object.</para>
  </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
   <para>Starts a database transaction.</para>
  </summary><param name="isolationLevel"> Specifies the isolation level for the transaction. </param><returns>
   <para>An object representing the new transaction.</para>
  </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.BeginTransaction">
            <summary>
   <para>Returns a transaction object. Commands associated with a transaction object are executed as a single transaction. The transaction is terminated with a call to the Commit or Rollback methods.</para>
  </summary><remarks>
   <para>To associate a command with a transaction object, use the HanaCommand.Transaction property.</para>
  </remarks><returns>
   <para>A HanaTransaction object representing the new transaction.</para>
  </returns><seealso cref="T:Sap.Data.Hana.HanaTransaction"/><seealso cref="P:Sap.Data.Hana.HanaCommand.Transaction"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
   <para>Returns a transaction object. Commands associated with a transaction object are executed as a single transaction. The transaction is terminated with a call to the Commit or Rollback methods.</para>
  </summary><remarks>
   <para>To associate a command with a transaction object, use the HanaCommand.Transaction property.</para>
  </remarks><param name="isolationLevel"> A member of the HanaIsolationLevel enumeration. The default value is ReadCommitted. </param><returns>
   <para>A HanaTransaction object representing the new transaction.</para>
  </returns><example>
   <code>HanaTransaction tx = 
    conn.BeginTransaction( HanaIsolationLevel.ReadUncommitted );</code>
  </example><seealso cref="T:Sap.Data.Hana.HanaTransaction"/><seealso cref="P:Sap.Data.Hana.HanaCommand.Transaction"/><seealso cref="T:Sap.Data.Hana.HanaIsolationLevel"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.BeginTransaction(Sap.Data.Hana.HanaIsolationLevel)">
            <summary>
   <para>Returns a transaction object. Commands associated with a transaction object are executed as a single transaction. The transaction is terminated with a call to the Commit or Rollback methods.</para>
  </summary><remarks>
   <para>To associate a command with a transaction object, use the HanaCommand.Transaction property.</para>
  </remarks><param name="isolationLevel"> A member of the HanaIsolationLevel enumeration. The default value is ReadCommitted. </param><returns>
   <para>A HanaTransaction object representing the new transaction.</para>
   <para>For more information, see @olink targetdoc="hanafeatures" targetptr="transaction-hanadotnet-development"@Transaction processing@/olink@.</para>
  </returns><seealso cref="T:Sap.Data.Hana.HanaTransaction"/><seealso cref="P:Sap.Data.Hana.HanaCommand.Transaction"/><seealso cref="T:Sap.Data.Hana.HanaIsolationLevel"/><seealso cref="M:Sap.Data.Hana.HanaTransaction.Commit"/><seealso cref="M:Sap.Data.Hana.HanaTransaction.Rollback"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.ChangeDatabase(System.String)">
            <summary>
   <para>Changes the current database for an open HanaConnection.</para>
  </summary><param name="database"> The name of the database to use instead of the current database. </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.CreateDbCommand">
            <summary>
   <para>Creates and returns a <see cref="T:System.Data.Common.DbCommand"></see> object associated with the current connection.</para>
  </summary><returns>
   <para>A <see cref="T:System.Data.Common.DbCommand"></see> object.</para>
  </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.CreateCommand">
            <summary>
   <para>Initializes a HanaCommand object.</para>
  </summary><remarks>
   <para>The command object is associated with the HanaConnection object.</para>
  </remarks><returns>
   <para>A HanaCommand object.</para>
  </returns><seealso cref="T:Sap.Data.Hana.HanaCommand"/><seealso cref="T:Sap.Data.Hana.HanaConnection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.Open">
            <summary>
   <para>Opens a database connection with the property settings specified by the HanaConnection.ConnectionString.</para>
  </summary><seealso cref="P:Sap.Data.Hana.HanaConnection.ConnectionString"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
   <para>Enlists in the specified transaction as a distributed transaction.</para>
  </summary><param name="transaction"> A reference to an existing System.Transactions.Transaction in which to enlist. </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)">
            <summary>
   <para>Enlists in the specified transaction as a distributed transaction.</para>
  </summary><param name="transaction"> A reference to an existing System.EnterpriseServices.ITransaction in which to enlist. </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.ClearAllPools">
            <summary>
   <para>Empties all connection pools.</para>
  </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.ClearPool(Sap.Data.Hana.HanaConnection)">
            <summary>
   <para>Empties the connection pool associated with the specified connection.</para>
  </summary><param name="connection"> The HanaConnection object to be cleared from the pool. </param><seealso cref="T:Sap.Data.Hana.HanaConnection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.GetSchema">
            <summary>
   <para>Returns the list of supported schema collections.</para>
  </summary><remarks>
   <para>See GetSchema(string,string[]) for a description of the available metadata.</para>
  </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String)">
            <summary>
   <para>Returns information for the specified metadata collection for this HanaConnection object.</para>
  </summary><remarks>
   <para>See GetSchema(string,string[]) for a description of the available metadata.</para>
  </remarks><param name="collection"> Name of the metadata collection. If a name is not provided, then MetaDataCollections is used. </param><seealso cref="T:Sap.Data.Hana.HanaConnection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.GetSchema(System.String,System.String[])">
            <summary>
   <para>Returns schema information for the data source of this HanaConnection object and, if specified, uses the specified string for the schema name and the specified string array for the restriction values.</para>
  </summary><remarks>
   <para>These methods are used to query the SAP HANA database server for metadata. Each type of metadata is given a collection name, which must be passed to receive that data. The default collection name is MetaDataCollections.</para>
   <para>You can query the data provider to determine the list of supported schema collections by calling the GetSchema method with no arguments, or with the schema collection name <b>MetaDataCollections</b>. This will return a DataTable with a list of the supported schema collections (CollectionName), the number of restrictions that they each support (NumberOfRestrictions), and the number of identifier parts that they use (NumberOfIdentifierParts).</para>
   <list type="table">
    <listheader>
     <term>Collection</term>
     <term>Metadata</term>
    </listheader>
    <item>
     <term>AllColumns</term>
     <term>Returns information on all columns in the database.</term>
    </item>
    <item>
     <term>Columns</term>
     <term>Returns information on all columns in the database.</term>
    </item>
    <item>
     <term>DataSourceInformation</term>
     <term>Returns information about the SAP HANA database server. </term>
    </item>
    <item>
     <term>DataTypes</term>
     <term>Returns a list of supported data types.</term>
    </item>
    <item>
     <term>ForeignKeys</term>
     <term>Returns information on all foreign keys in the database.</term>
    </item>
    <item>
     <term>IndexColumns</term>
     <term>Returns information on all index columns in the database. </term>
    </item>
    <item>
     <term>Indexes</term>
     <term>Returns information on all indexes in the database.</term>
    </item>
    <item>
     <term>MetaDataCollections</term>
     <term>Returns a list of all collection names.</term>
    </item>
    <item>
     <term>ProcedureParameters</term>
     <term>Returns information on all procedure parameters in the database.</term>
    </item>
    <item>
     <term>Procedures</term>
     <term>Returns information on all procedures in the database.</term>
    </item>
    <item>
     <term>ReservedWords</term>
     <term>Returns a list of reserved words used by SAP HANA.</term>
    </item>
    <item>
     <term>Restrictions</term>
     <term>Returns information on restrictions used in GetSchema.</term>
    </item>
    <item>
     <term>Tables</term>
     <term>Returns information on all tables in the database.</term>
    </item>
    <item>
     <term>Users</term>
     <term>Returns information on all users in the database.</term>
    </item>
    <item>
     <term>ViewColumns</term>
     <term>Returns information on all columns in views in the database.</term>
    </item>
    <item>
     <term>Views</term>
     <term>Returns information on all views in the database.</term>
    </item>
   </list>
   <para>These collection names are also available as read-only properties in the HanaMetaDataCollectionNames class.</para>
   <para>The results returned can be filtered by specifying an array of restrictions in the call to GetSchema.</para>
   <para>The restrictions available with each collection can be queried by calling:</para>
   <code>GetSchema( "Restrictions" )</code>
   <para>If the collection requires four restrictions, then the restrictions parameter must be either NULL, or a string with four values.</para>
   <para>To filter on a particular restriction, place the string to filter by in its place in the array and leave any unused places NULL. For example, the Tables collection has three restrictions: Owner, Table, and TableType.</para>
   <para>To filter the Table collection by table_name:</para>
   <code>GetSchema( "Tables", new string[ ] { NULL, "my_table", NULL } ) </code>
   <para>This example returns information on all tables named my_table.</para>
   <code>GetSchema( "Tables", new string[ ] { "DEMO", "my_table", NULL } )</code>
   <para>This example returns information on all tables named my_table owned by the schema DEMO.</para>
   <para>The following list summarizes the columns returned by each collection. If the number of rows returned in a collection can be reduced by specifying a restriction on a column, then the restriction name for that column is shown in parentheses. The order in which restrictions are specified is the order in which they are presented in the lists below.</para>
   <para><b>AllColumns</b> collection</para>
   <list type="bullet">
    <item>TABLE_SCHEMA</item>
    <item>TABLE_NAME</item>
    <item>COLUMN_NAME</item>
    <item>ORDINAL_POSITION</item>
    <item>DATA_TYPE</item>
    <item>COLUMN_DEFAULT</item>
    <item>IS_NULLABLE</item>
    <item>NUMERIC_PRECISION</item>
    <item>NUMERIC_SCALE</item>
    <item>CHARACTER_MAXIMUM_LENGTH</item>
    <item>DATETIME_PRECISION</item>
   </list>
   <para><b>Columns</b> collection</para>
   <list type="bullet">
    <item>TABLE_SCHEMA</item>
    <item>TABLE_NAME</item>
    <item>COLUMN_NAME</item>
    <item>ORDINAL_POSITION</item>
    <item>DATA_TYPE</item>
    <item>COLUMN_DEFAULT</item>
    <item>IS_NULLABLE</item>
    <item>NUMERIC_PRECISION</item>
    <item>NUMERIC_SCALE</item>
    <item>CHARACTER_MAXIMUM_LENGTH</item>
    <item>DATETIME_PRECISION</item>
   </list>
   <para><b>DataSourceInformation</b> collection </para>
   <list type="bullet">
    <item>CompositeIdentifierSeparatorPattern</item>
    <item>DataSourceProductName</item>
    <item>DataSourceProductVersion</item>
    <item>DataSourceProductVersionNormalized</item>
    <item>GroupByBehavior</item>
    <item>IdentifierPattern</item>
    <item>IdentifierCase</item>
    <item>OrderByColumnsInSelect</item>
    <item>ParameterMarkerFormat</item>
    <item>ParameterMarkerPattern</item>
    <item>ParameterNameMaxLength</item>
    <item>ParameterNamePattern</item>
    <item>QuotedIdentifierPattern</item>
    <item>QuotedIdentifierCase</item>
    <item>StatementSeparatorPattern</item>
    <item>StringLiteralPattern</item>
    <item>SupportedJoinOperators</item>
   </list>
   <para><b>DataTypes</b> collection</para>
   <list type="bullet">
    <item>TypeName</item>
    <item>ProviderDbType</item>
    <item>ColumnSize</item>
    <item>CreateFormat</item>
    <item>CreateParameters</item>
    <item>DataType</item>
    <item>IsAutoIncrementable</item>
    <item>IsBestMatch</item>
    <item>IsCaseSensitive</item>
    <item>IsFixedLength</item>
    <item>IsFixedPrecisionScale</item>
    <item>IsLong</item>
    <item>IsNullable</item>
    <item>IsSearchable</item>
    <item>IsSearchableWithLike</item>
    <item>IsUnsigned</item>
    <item>MaximumScale</item>
    <item>MinimumScale</item>
    <item>IsConcurrencyType</item>
    <item>IsLiteralSupported</item>
    <item>LiteralPrefix</item>
    <item>LiteralSuffix</item>
   </list>
   <para><b>ForeignKeys</b> collection</para>
   <list type="bullet">
    <item>TABLE_SCHEMA</item>
    <item>TABLE_NAME</item>
    <item>COLUMN_NAME</item>
    <item>POSITION</item>
    <item>CONSTRAINT_NAME</item>
    <item>REFERENCED_SCHEMA_NAME</item>
    <item>REFERENCED_TABLE_NAME</item>
    <item>REFERENCED_COLUMN_NAME</item>
    <item>REFERENCED_CONSTRAINT_NAME</item>
    <item>UPDATE_RULE</item>
    <item>DELETE_RULE</item>
   </list>
   <para><b>IndexColumns</b> collection</para>
   <list type="bullet">
    <item>TABLE_SCHEMA</item>
    <item>TABLE_NAME</item>
    <item>COLUMN_NAME</item>
    <item>POSITION</item>
    <item>INDEX_NAME</item>
    <item>CONSTRAINT</item>
    <item>ASCENDING_ORDER</item>
   </list>
   <para><b>Indexes</b> collection</para>
   <list type="bullet">
    <item>TABLE_SCHEMA</item>
    <item>TABLE_NAME</item>
    <item>INDEX_NAME</item>
    <item>INDEX_TYPE</item>
    <item>CONSTRAINT</item>
   </list>
   <para><b>MetaDataCollections</b> collection</para>
   <list type="bullet">
    <item>CollectionName</item>
    <item>NumberOfRestrictions</item>
    <item>NumberOfIdentifierParts</item>
   </list>
   <para><b>ProcedureParameters</b> collection</para>
   <list type="bullet">
    <item>PROCEDURE_SCHEMA</item>
    <item>PROCEDURE_NAME</item>
    <item>PARAMETER_NAME</item>
    <item>DATA_TYPE_NAME</item>
    <item>LENGTH</item>
    <item>SCALE</item>
    <item>IS_NULLABLE</item>
    <item>POSITION</item>
    <item>PARAMETER_TYPE</item>
   </list>
   <para><b>Procedures</b> collection</para>
   <list type="bullet">
    <item>ROUTINE_SCHEMA</item>
    <item>ROUTINE_NAME</item>
    <item>ROUTINE_TYPE</item>
   </list>
   <para><b>ReservedWords</b> collection</para>
   <list type="bullet">
    <item>reserved_word</item>
   </list>
   <para><b>Restrictions</b> collection</para>
   <list type="bullet">
    <item>CollectionName</item>
    <item>RestrictionName</item>
    <item>RestrictionDefault</item>
    <item>RestrictionNumber</item>
   </list>
   <para><b>Tables</b> collection</para>
   <list type="bullet">
    <item>TABLE_SCHEMA</item>
    <item>TABLE_NAME</item>
    <item>TABLE_TYPE</item> 
   </list>
   <para><b>Users</b> collection</para>
   <list type="bullet">
    <item>USER_NAME</item>
    <item>USER_MODE</item>
    <item>CREATOR</item>
    <item>CREATE_TIME</item>
   </list>
   <para><b>ViewColumns</b> collection</para>
   <list type="bullet">
    <item>VIEW_SCHEMA</item>
    <item>VIEW_NAME</item>
    <item>COLUMN_NAME</item>
   </list>
   <para><b>Views</b> collection</para>
   <list type="bullet">
    <item>VIEW_SCHEMA</item>
    <item>VIEW_NAME</item>
    <item>VIEW_TYPE</item>
   </list>
  </remarks><returns>
   <para>A DataTable that contains schema information.</para>
  </returns><seealso cref="T:Sap.Data.Hana.HanaConnection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnection.ChangePassword(System.String,System.String)">
            <summary>
   <para>Changes the password to the supplied new password for the user indicated in the connection string.</para>
  </summary><param name="connectionString"> The connection string that contains enough information to connect to the SAP HANA database server that you want. The connection string may contain the user ID and the current password. </param><param name="newPassword"> The new password to set. This password must comply with any password security policy set on the SAP HANA database server, including minimum length, requirements for specific characters, and so on. </param><exception cref="T:System.ArgumentNullException">
   <para>Either the connectionString or the newPassword parameter is null.</para>
  </exception><exception cref="T:System.ArgumentException">
   <para>The connection string includes the option to use integrated security.</para>
  </exception>
        </member>
        <member name="E:Sap.Data.Hana.HanaConnection.InfoMessage">
            <summary>
   <para>Occurs when the SAP HANA database server returns a warning or informational message.</para>
  </summary><remarks>
   <para>The event handler receives an argument of type HanaInfoMessageEventArgs containing data related to this event. The following HanaInfoMessageEventArgs properties provide information specific to this event: NativeError, Errors, Message, MessageType, and Source.</para>
   <para>For more information, see the Microsoft .NET Framework documentation for OleDbConnection.InfoMessage Event.</para>
  </remarks>
        </member>
        <member name="E:Sap.Data.Hana.HanaConnection.StateChange">
            <summary>
   <para>Occurs when the state of the HanaConnection object changes.</para>
  </summary><remarks>
   <para>The event handler receives an argument of type StateChangeEventArgs with data related to this event. The following StateChangeEventArgs properties provide information specific to this event: CurrentState and OriginalState.</para>
   <para>For more information, see the Microsoft .NET Framework documentation for OleDbConnection.StateChange Event.</para>
  </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnection.InitString">
            <summary>
   <para>A SQL statement that is executed immediately after the connection is established.</para>
  </summary><remarks>
   <para>The InitString is executed immediately after the connection is opened.</para>
  </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnection.ConnectionString">
            <summary>
   <para>Provides the database connection string.</para>
  </summary><remarks>
   <para>The ConnectionString is designed to match the SAP HANA connection string format as closely as possible with the following exception: when the Persist Security Info connection parameter is set to false (the default), the connection string that is returned is the same as the user-specified ConnectionString minus security information(the password). The data provider does not persist the password in a returned connection string unless you set the Persist Security Info connection parameter to true.</para>
   <para>Use the ConnectionString property to connect to a variety of data sources.</para>
   <para>You can set the ConnectionString property only when the connection is closed. Many of the connection string values have corresponding read-only properties. When the connection string is set, all of these properties are updated, unless an error is detected. If an error is detected, then none of the properties are updated. HanaConnection properties return only those settings contained in the ConnectionString.</para>
   <para>If you reset the ConnectionString on a closed connection, then all connection string values and related properties are reset, including the password.</para>
   <para>When the property is set, a preliminary validation of the connection string is performed. When an application calls the Open method, the connection string is fully validated. A runtime exception is generated if the connection string contains invalid or unsupported properties.</para>
   <para>Values can be delimited by single or double quotes. Either single or double quotes may be used within a connection string by using the other delimiter, for example, name="value's" or name= 'value"s', but not name='value's' or name= ""value"". Blank characters are ignored unless they are placed within a value or within quotes. keyword=value pairs must be separated by a semicolon. If a semicolon is part of a value, then it must also be delimited by quotes. Escape sequences are not supported, and the value type is irrelevant. Names are not case sensitive. If a property name occurs more than once in the connection string, then the value associated with the last occurrence is used.</para>
   <para>Use caution when constructing a connection string based on user input, such as when retrieving a user ID and password from a window, and appending it to the connection string. The application should not allow a user to embed extra connection string parameters in these values.</para>
   <para>The default value of the Pooling connection parameter is true (pooling=true).</para>
  </remarks><example>
   <para>The following statements specify a connection string and open the connection.</para>
   <code>HanaConnection conn = new HanaConnection();
conn.ConnectionString = "Server=hana-db:30015;UserID=JSmith;Password=secret";
conn.Open();</code>
  </example><seealso cref="T:Sap.Data.Hana.HanaConnection"/><seealso cref="M:Sap.Data.Hana.HanaConnection.Open"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnection.ConnectionTimeout">
            <summary>
   <para>Gets the number of seconds before a connection attempt times out with an error.</para>
  </summary><value>The default ConnectionTimeout value is 15 seconds.</value><example>
   <para>The following statement displays the value of the ConnectionTimeout.</para>
   <code>MessageBox.Show( conn.ConnectionTimeout.ToString( ) );</code>
  </example>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnection.Database">
            <summary>
   <para>Gets the SAP HANA database server name (for example, GA1).</para>
  </summary><remarks>
   <para>If the connection is open, then the HanaConnection object returns the name of the current database. Otherwise, the HanaConnection object looks in the connection string for the Database connection parameter.</para>
  </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnection.DataSource">
            <summary>
   <para>Gets the SAP HANA database server host name (for example, hana-db).</para>
  </summary><remarks>
   <para>If the connection is open, then the HanaConnection object returns the host name. Otherwise, the HanaConnection object looks in the connection string for the Server connection parameter.</para>
  </remarks><seealso cref="T:Sap.Data.Hana.HanaConnection"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnection.ServerVersion">
            <summary>
   <para>Gets a string that contains the version of the instance of SAP HANA to which the client is connected.</para>
  </summary><remarks>
   <para>The database server version string has the following format: ##.##.##.#### (major.minor.patch.build).</para>
  </remarks><returns>
   <para>The database server version string.</para>
  </returns>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnection.State">
            <summary>
   <para>Indicates the state of the HanaConnection object.</para>
  </summary><returns>
   <para>A System.Data.ConnectionState enumeration.</para>
  </returns>
        </member>
        <member name="T:Sap.Data.Hana.ConnectionOptionType">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.ConnectionOptions">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaConnectionStringBuilderBase">
            <summary>
   <para>Base class of the HanaConnectionStringBuilder class.</para>
  </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnectionStringBuilderBase.SetUseLongNameAsKeyword(System.Boolean)">
            <summary>
   <para>Sets a boolean value that indicates whether long connection parameter names are used in the connection string. Long connection parameter names are used by default.</para>
  </summary><param name="useLongNameAsKeyword">A boolean value that indicates whether the long connection parameter name is used in the connection string.</param><seealso cref="M:Sap.Data.Hana.HanaConnectionStringBuilderBase.GetUseLongNameAsKeyword"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnectionStringBuilderBase.GetUseLongNameAsKeyword">
            <summary>
   <para>Gets a boolean value that indicates whether long connection parameter names are used in the connection string.</para>
  </summary><remarks>
   <para>SAP HANA connection parameters have both long and short forms of their names. For example, to specify a password in your connection string, you can use either of the following parameters: Password or PWD. By default, long connection parameter names are used to build connection strings.</para>
  </remarks><returns>
   <para>True if long connection parameter names are used to build connection strings; false otherwise.</para>
  </returns><seealso cref="M:Sap.Data.Hana.HanaConnectionStringBuilderBase.SetUseLongNameAsKeyword(System.Boolean)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnectionStringBuilderBase.GetKeyword(System.String)">
            <summary>
   <para>Gets the keyword for the specified HanaConnectionStringBuilder property.</para>
  </summary><param name="propName">The name of the HanaConnectionStringBuilder property.</param><returns>
   <para>The keyword for the specified HanaConnectionStringBuilder property.</para>
  </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnectionStringBuilderBase.ContainsKey(System.String)">
            <summary>
   <para>Determines whether the HanaConnectionStringBuilder object contains a specific keyword.</para>
  </summary><param name="keyword">The keyword to locate in the HanaConnectionStringBuilder.</param><returns>
   <para>True if the value associated with keyword has been set; false otherwise.</para>
  </returns><example>
   <para>The following statement determines whether the HanaConnectionStringBuilder object contains the UserID keyword.</para>
   <code>connectString.ContainsKey("UserID")</code>
  </example>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnectionStringBuilderBase.Remove(System.String)">
            <summary>
   <para>Removes the entry with the specified key from the HanaConnectionStringBuilder instance.</para>
  </summary><param name="keyword">The key of the key/value pair to be removed from the connection string in this HanaConnectionStringBuilder.</param><returns>
   <para>True if the key existed within the connection string and was removed; false if the key did not exist.</para>
  </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnectionStringBuilderBase.ShouldSerialize(System.String)">
            <summary>
   <para>Indicates whether the specified key exists in this HanaConnectionStringBuilder instance.</para>
  </summary><param name="keyword">The key to locate in the HanaConnectionStringBuilder.</param><returns>
   <para>True if the HanaConnectionStringBuilder contains an entry with the specified key; false otherwise.</para>
  </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnectionStringBuilderBase.TryGetValue(System.String,System.Object@)">
            <summary>
   <para>Retrieves a value corresponding to the supplied key from this HanaConnectionStringBuilder.</para>
  </summary><param name="keyword">The key of the item to retrieve.</param><param name="value">The value corresponding to keyword.</param><returns>
   <para>True if keyword was found within the connection string; false otherwise.</para>
  </returns>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilderBase.Keys">
            <summary>
   <para>Gets a System.Collections.ICollection that contains the keys in the HanaConnectionStringBuilder.</para>
  </summary><returns>
   <para>A System.Collections.ICollection that contains the keys in the HanaConnectionStringBuilder.</para>
  </returns>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilderBase.Item(System.String)">
            <summary>
   <para>Gets or sets the value of the connection keyword.</para>
   <code>HanaConnectionStringBuilder sb = new HanaConnectionStringBuilder();
   sb["Password"] = "secret";</code>
  </summary><value>An object representing the value of the specified connection keyword.</value><remarks>
   <para>If the keyword or type is invalid, then an exception is raised. The parameter value is case insensitive.</para>
   <para>When setting the value, passing NULL clears the value.</para>
  </remarks><param name="keyword">The name of the connection keyword.</param>
        </member>
        <member name="T:Sap.Data.Hana.HanaConnectionStringBuilder">
            <summary>
   <para>Provides a simple way to create and manage the contents of connection strings used by the HanaConnection class.</para>
  </summary><remarks>
   <para>The HanaConnectionStringBuilder class inherits HanaConnectionStringBuilderBase, which inherits DbConnectionStringBuilder.</para>
   <para>For a list of connection parameters, see @olink targetdoc="hanafeatures" targetptr="hf-dotnet-dev-conn-parms"@Connection parameters@/olink@.</para>
  </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnectionStringBuilder.#ctor">
            <summary>
   <para>Initializes a new instance of the HanaConnectionStringBuilder class.</para>
  </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaConnectionStringBuilder.#ctor(System.String)">
            <summary>
   <para>Initializes a new instance of the HanaConnectionStringBuilder class.</para>
  </summary><param name="connectionString">The basis for the object's internal connection information. Parsed into keyword=value pairs. For a list of connection parameters, see @olink targetdoc="hanafeatures" targetptr="hf-dotnet-dev-conn-parms"@Connection parameters@/olink@.
  </param><example>
   <para>The following statement initializes a HanaConnection object for a connection to an SAP HANA database server named HumanResources. The connection uses the user ID Admin and the password Money123.</para>
   <code>HanaConnectionStringBuilder sb = new HanaConnectionStringBuilder(
    "UserID=Admin;Password=Money123;Server=HumanResources:30015" );</code>
  </example>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.UserName">
            <summary>
   <para>Gets or sets the UserName connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.Password">
            <summary>
   <para>Gets or sets the Password connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.Database">
            <summary>
   <para>Gets or sets the Database connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.Server">
            <summary>
   <para>Gets or sets the Server connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.DataSourceName">
            <summary>
   <para>Gets or sets the DataSourceName connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.Integrated">
            <!-- No matching elements were found for the following include tag --><include file="ConnectionStringBuilder.xml" path="doc/member[@name=&quot;Integrated&quot;]/*"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.CurrentSchema">
            <summary>
   <para>Gets or sets the CurrentSchema connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.IsolationLevel">
            <summary>
   <para>Gets or sets the IsolationLevel connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.ConnectionTimeout">
            <summary>
   <para>Gets or sets the ConnectionTimeout connection property.</para>
  </summary><example>
   <para>The following statement displays the value of the ConnectionTimeout property.</para>
   <code>MessageBox.Show( connString.ConnectionTimeout.ToString() );</code>
  </example>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.PersistSecurityInfo">
            <summary>
   <para>Gets or sets the PersistSecurityInfo connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.ConnectionLifetime">
            <summary>
   <para>Gets or sets the ConnectionLifetime connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.MinPoolSize">
            <summary>
   <para>Gets or sets the MinPoolSize connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.MaxPoolSize">
            <summary>
   <para>Gets or sets the MaxPoolSize connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.Pooling">
            <summary>
   <para>Gets or sets the Pooling connection property.</para>
  </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaConnectionStringBuilder.InitString">
            <summary>
   <para>Gets or sets the InitString connection property.</para>
  </summary>
        </member>
        <member name="T:Sap.Data.Hana.HanaConsts">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaRowUpdatedEventArgs">
            <summary>
            <para>Provides data for the RowUpdated event.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            <para>Initializes a new instance of the HanaRowUpdatedEventArgs class.</para>
        </summary><param name="row">
            The DataRow sent through an Update. 
        </param><param name="command">
            The IDbCommand executed when Update is called. 
        </param><param name="statementType">
            One of the StatementType values that specifies the type of query executed. 
        </param><param name="tableMapping">
            The DataTableMapping sent through an Update. 
        </param>
        </member>
        <member name="P:Sap.Data.Hana.HanaRowUpdatedEventArgs.Command">
            <summary>
            <para>Gets the HanaCommand that is executed when <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)"/> is called.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaRowUpdatedEventArgs.RecordsAffected">
            <summary>
            <para>Returns the number of rows changed, inserted, or deleted by the execution of the SQL statement.</para>
        </summary><value>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</value>       
        </member>
        <member name="T:Sap.Data.Hana.HanaRowUpdatingEventArgs">
            <summary>
            <para>Provides data for the RowUpdating event.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            <para>Initializes a new instance of the HanaRowUpdatingEventArgs class.</para>
        </summary><param name="row">
            The DataRow to update. 
        </param><param name="command">
            The IDbCommand to execute during update. 
        </param><param name="statementType">
            One of the StatementType values that specifies the type of query executed. 
        </param><param name="tableMapping">
            The DataTableMapping sent through an Update. 
        </param>
        </member>
        <member name="P:Sap.Data.Hana.HanaRowUpdatingEventArgs.Command">
            <summary>
            <para>Specifies the HanaCommand to execute when performing the Update.</para>
        </summary>        
        </member>
        <member name="T:Sap.Data.Hana.HanaRowUpdatedEventHandler">
            <summary>
            <para>Represents the method that handles the RowUpdated event of a HanaDataAdapter.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.HanaRowUpdatingEventHandler">
            <summary>
            <para>Represents the method that handles the RowUpdating event of a HanaDataAdapter.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.HanaDataAdapter">
            <summary>
            <para>Represents a set of commands and a database connection used to fill a <see cref="T:System.Data.DataSet"/> and to update a database.</para>
        </summary><remarks>
            <para>The <see cref="T:System.Data.DataSet"/> provides a way to work with data offline. The HanaDataAdapter provides methods to associate a DataSet with a set of SQL statements.</para>
            <para><b>Implements:</b> <see cref="T:System.Data.IDbDataAdapter"/>, <see cref="T:System.Data.IDataAdapter"/>, <see cref="T:System.ICloneable"/></para>
            <para>For more information, see @olink targetdoc="hanafeatures" targetptr="using-adapter-access-manipulate-hanadotnet"@HanaDataAdapter overview@/olink@ and @olink targetdoc="hanafeatures" targetptr="accessing-hanadotnet-dev"@Data access and manipulation@/olink@.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.#ctor">
            <summary>
            <para>Initializes a HanaDataAdapter object.</para>
        </summary><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor(Sap.Data.Hana.HanaCommand)"/><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor(System.String,Sap.Data.Hana.HanaConnection)"/><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor(System.String,System.String)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.#ctor(Sap.Data.Hana.HanaCommand)">
            <summary>
            <para>Initializes a HanaDataAdapter object with the specified SELECT statement.</para>
        </summary><param name="selectCommand">
            A HanaCommand object that is used during <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/> to select records from the data source for placement in the <see cref="T:System.Data.DataSet"/>. 
        </param><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor"/><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor(System.String,Sap.Data.Hana.HanaConnection)"/><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor(System.String,System.String)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.#ctor(System.String,Sap.Data.Hana.HanaConnection)">
            <summary>
            <para>Initializes a HanaDataAdapter object with the specified SELECT statement and connection.</para>
        </summary><param name="selectCommandText">
            A SELECT statement to be used to set the HanaDataAdapter.SelectCommand property of the HanaDataAdapter object. 
        </param><param name="selectConnection">
            A HanaConnection object that defines a connection to an SAP HANA database server. 
        </param><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor"/><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor(Sap.Data.Hana.HanaCommand)"/><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor(System.String,System.String)"/><seealso cref="P:Sap.Data.Hana.HanaDataAdapter.SelectCommand"/><seealso cref="T:Sap.Data.Hana.HanaConnection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a HanaDataAdapter object with the specified SELECT statement and connection string.</para>
        </summary><param name="selectCommandText">
            A SELECT statement to be used to set the HanaDataAdapter.SelectCommand property of the HanaDataAdapter object. 
        </param><param name="selectConnectionString">
            A connection string for an SAP HANA database server. 
        </param><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor"/><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor(Sap.Data.Hana.HanaCommand)"/><seealso cref="M:Sap.Data.Hana.HanaDataAdapter.#ctor(System.String,Sap.Data.Hana.HanaConnection)"/><seealso cref="P:Sap.Data.Hana.HanaDataAdapter.SelectCommand"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.System#ICloneable#Clone">
            <summary>
            <para>Creates a new instance of the HanaDataAdapter class with the same value as an existing instance.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.Dispose(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the HanaDataAdapter object and optionally releases the managed resources.</para>
        </summary><param name="disposing">
            True releases both managed and unmanaged resources; false releases only unmanaged resources. 
        </param><seealso cref="T:Sap.Data.Hana.HanaDataAdapter"/>	
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            <para>Raises the RowUpdated event of a data provider.</para>
        </summary><param name="value">
            A <see cref="T:System.Data.Common.RowUpdatedEventArgs"/> that contains the event data. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            <para>Raises the RowUpdating event of a data provider.</para>
        </summary><param name="value">
            A <see cref="T:System.Data.Common.RowUpdatingEventArgs"/> that contains the event data. 
        </param>	
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.ClearBatch">
            <summary>
            <para>Removes all HanaCommand objects from the batch.</para>
        </summary><seealso cref="T:Sap.Data.Hana.HanaCommand"/>	
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.InitializeBatching">
            <summary>
            <para>Initializes batching for the HanaDataAdapter object.</para>
        </summary><seealso cref="T:Sap.Data.Hana.HanaDataAdapter"/>	
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.TerminateBatching">
            <summary>
            <para>Ends batching for the HanaDataAdapter object.</para>
        </summary><seealso cref="T:Sap.Data.Hana.HanaDataAdapter"/>	
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            <para>Adds or refreshes rows in a <see cref="T:System.Data.DataSet"/> or <see cref="T:System.Data.DataTable"/> object with data from the database.</para>
        </summary><remarks>
            <para>Even if you use the startRecord argument to limit the number of records that are copied to the DataSet, all records in the HanaDataAdapter query are fetched from the database to the client. For large result sets, this can have a significant performance impact.</para>
            <para>An alternative is to use a HanaDataReader when a read-only, forward-only result set is sufficient, perhaps with SQL statements (ExecuteNonQuery) to undertake modifications. Another alternative is to write a stored procedure that returns only the result you need.</para>
            <para>If SelectCommand does not return any rows, then no tables are added to the DataSet and no exception is raised.</para>
            <para>For more information, see @olink targetdoc="hanafeatures" targetptr="using-adapter-access-manipulate-hanadotnet"@HanaDataAdapter overview@/olink@.</para>
        </remarks><param name="dataSet">
            A <see cref="T:System.Data.DataSet"/> to fill with records and optionally, schema. 
        </param><param name="startRecord">
            The zero-based record number with which to start. 
        </param><param name="maxRecords">
            The maximum number of records to be read into the <see cref="T:System.Data.DataSet"/>. 
        </param><param name="srcTable">
            The name of the source table to use for table mapping. 
        </param><param name="command">
            The SQL SELECT statement used to retrieve rows from the data source. 
        </param><param name="behavior">
            One of the CommandBehavior values. 
        </param><returns>
        <para>The number of rows successfully added or refreshed in the <see cref="T:System.Data.DataSet"/>.</para>
        </returns><seealso cref="T:System.Data.CommandBehavior"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            <para>Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet"/> to match those in the data source using the System.Data.DataSet and <see cref="T:System.Data.DataTable"/> names.</para>
        </summary><remarks>
            <para>Even if you use the startRecord argument to limit the number of records that are copied to the DataSet, all records in the HanaDataAdapter query are fetched from the database to the client. For large result sets, this can have a significant performance impact.</para>
            <para>An alternative is to use a HanaDataReader when a read-only, forward-only result set is sufficient, perhaps with SQL statements (ExecuteNonQuery) to undertake modifications. Another alternative is to write a stored procedure that returns only the result you need.</para>
            <para>If SelectCommand does not return any rows, then no tables are added to the DataSet and no exception is raised.</para>
            <para>For more information, see @olink targetdoc="hanafeatures" targetptr="using-adapter-access-manipulate-hanadotnet"@HanaDataAdapter overview@/olink@.</para>
        </remarks><param name="dataTables">
            The <see cref="T:System.Data.DataTable"/> objects to fill from the data source. 
        </param><param name="startRecord">
            The zero-based record number to start with. 
        </param><param name="maxRecords">
            The maximum number of records to retrieve. 
        </param><param name="command">
            The System.Data.IDbCommand executed to fill the System.Data.DataTable objects. 
        </param><param name="behavior">
            One of the System.Data.CommandBehavior values. 
        </param><returns>
        <para>The number of rows added to or refreshed in the data tables.</para>
        </returns>	
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)">
            <summary>
            <para>Adds a <see cref="T:System.Data.DataTable"/> to a <see cref="T:System.Data.DataSet"/> and configures the schema to match the schema in the data source.</para>
        </summary><remarks>
            <para>For more information, see <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)"/> and @olink targetdoc="hanafeatures" targetptr="data-adapter-fillschema-hanadotnet"@HanaDataAdapter: Format a DataTable using FillSchema@/olink@.</para>
        </remarks><param name="dataSet">
            A <see cref="T:System.Data.DataSet"/> to fill with the schema. 
        </param><param name="schemaType">
            One of the <see cref="T:System.Data.SchemaType"/> values that specify how to insert the schema. 
        </param><param name="command">
            The SQL SELECT statement used to retrieve rows from the data source. 
        </param><param name="srcTable">
            The name of the source table to use for table mapping. 
        </param><param name="behavior">
            One of the System.Data.CommandBehavior values. 
        </param><returns>
        <para>A reference to a collection of <see cref="T:System.Data.DataTable"/> objects that were added to the <see cref="T:System.Data.DataSet"/>.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            <para>Adds a <see cref="T:System.Data.DataTable"/> to a <see cref="T:System.Data.DataSet"/> and configures the schema to match the schema in the data source.</para>
        </summary><remarks>
            <para>For more information, see <see cref="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)"/> and @olink targetdoc="hanafeatures" targetptr="data-adapter-fillschema-hanadotnet"@HanaDataAdapter: Format a DataTable using FillSchema@/olink@.</para>
        </remarks><param name="dataTable">
            A <see cref="T:System.Data.DataTable"/> to fill with the schema. 
        </param><param name="schemaType">
            One of the <see cref="T:System.Data.SchemaType"/> values that specify how to insert the schema. 
        </param><param name="command">
            The SQL SELECT statement used to retrieve rows from the data source. 
        </param><param name="behavior">
            One of the System.Data.CommandBehavior values. 
        </param><returns>
        <para>A reference to the <see cref="T:System.Data.DataTable"/> object that contains the schema.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.GetFillParameters">
            <summary>
            <para>Returns the parameters set by you when executing a SELECT statement.</para>
        </summary><returns>
        <para>An array of IDataParameter objects that contains the parameters set by the user.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs"/> class.</para>
        </summary><param name="dataRow">
            The <see cref="T:System.Data.DataRow"/> used to update the data source. 
        </param><param name="command">
            The <see cref="T:System.Data.IDbCommand"/> executed during the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)"/>. 
        </param><param name="statementType">
            Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement. 
        </param><param name="tableMapping">
            A <see cref="T:System.Data.Common.DataTableMapping"/> object. 
        </param><returns>
        <para>A new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs"/> class.</para>
        </returns>	
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs"/> class.</para>
        </summary><param name="dataRow">
            The <see cref="T:System.Data.DataRow"/> used to update the data source. 
        </param><param name="command">
            The <see cref="T:System.Data.IDbCommand"/> executed during the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)"/>. 
        </param><param name="statementType">
            Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement. 
        </param><param name="tableMapping">
            A <see cref="T:System.Data.Common.DataTableMapping"/> object. 
        </param><returns>
        <para>A new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs"/> class.</para>
        </returns>	
        </member>
        <member name="M:Sap.Data.Hana.HanaDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)">
            <summary>
            <para>Updates the tables in a database with the changes made to the DataSet.</para>
        </summary><remarks>
            <para>The Update is carried out using the InsertCommand, UpdateCommand, and DeleteCommand on each row in the data set that has been inserted, updated, or deleted.</para>
            <para>For more information, see @olink targetdoc="hanafeatures" targetptr="hana-dataadapter-inserting-adodotnet"@HanaDataAdapter: Insert rows using Add and Update@/olink@ and @olink targetdoc="hanafeatures" targetptr="hana-dataadapter-deleting-adodotnet"@HanaDataAdapter: Delete rows using Delete and Update@/olink@.</para>
        </remarks><param name="dataRows">
            An array of <see cref="T:System.Data.DataRow"/> to update from. 
        </param><param name="tableMapping">
            The <see cref="P:System.Data.IDataAdapter.TableMappings"/> collection to use. 
        </param><returns>
        <para>The number of rows successfully updated from the <see cref="T:System.Data.DataRow"/> array.</para>
        </returns><seealso cref="P:Sap.Data.Hana.HanaDataAdapter.DeleteCommand"/><seealso cref="P:Sap.Data.Hana.HanaDataAdapter.InsertCommand"/><seealso cref="P:Sap.Data.Hana.HanaDataAdapter.UpdateCommand"/>	
        </member>
        <member name="E:Sap.Data.Hana.HanaDataAdapter.RowUpdated">
            <summary>
            <para>Occurs during an update after a command is executed against the data source. When an attempt to update is made, the event fires.</para>
        </summary><remarks>
            <para>The event handler receives an argument of type HanaRowUpdatedEventArgs containing data related to this event.</para>
            <para>For more information, see the Microsoft .NET Framework documentation for OleDbDataAdapter.RowUpdated Event.</para>
        </remarks>
        </member>
        <member name="E:Sap.Data.Hana.HanaDataAdapter.RowUpdating">
            <summary>
            <para>Occurs during an update before a command is executed against the data source. When an attempt to update is made, the event fires.</para>
        </summary><remarks>
            <para>The event handler receives an argument of type HanaRowUpdatingEventArgs containing data related to this event.</para>
            <para>For more information, see the Microsoft .NET Framework documentation for OleDbDataAdapter.RowUpdating Event.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaDataAdapter.UpdateBatchSize">
            <summary>
            <para>Gets or sets the number of rows that are processed in each round-trip to the SAP HANA database server.</para>
        </summary><remarks>
            <para>The default value is 1.</para>
            <para>Setting the value to something greater than 1 causes HanaDataAdapter.Update to execute all the insert statements in batches. The deletions and updates are executed sequentially as before, but insertions are executed afterward in batches of size equal to the value of UpdateBatchSize. Setting the value to 0 causes Update to send the insert statements in a single batch.</para>
            <para>Setting the value to something greater than 1 causes HanaDataAdapter.Fill to execute all the insert statements in batches. The deletions and updates are executed sequentially as before, but insertions are executed afterward in batches of size equal to the value of UpdateBatchSize.</para>
            <para>Setting the value to 0 causes Fill to send the insert statements in a single batch.</para>
            <para>Setting it less than 0 is an error.</para>
            <para>If UpdateBatchSize is set to something other than one, and the InsertCommand property is set to something that is not an INSERT statement, then an exception is thrown when calling Fill.</para>
            <para>This behavior is different from SqlDataAdapter. It batches all types of commands.</para>
        </remarks>        
        </member>
        <member name="P:Sap.Data.Hana.HanaDataAdapter.TableMappings">
            <summary>
            <para>Specifies a collection that provides the master mapping between a source table and a DataTable.</para>
        </summary><remarks>
            <para>The default value is an empty collection.</para>
            <para>When reconciling changes, the HanaDataAdapter uses the DataTableMappingCollection collection to associate the column names used by the data source with the column names used by the DataSet.</para>
        </remarks>	
        </member>
        <member name="P:Sap.Data.Hana.HanaDataAdapter.DeleteCommand">
            <summary>
            <para>Specifies a HanaCommand object that is executed against the database when the Update method is called to delete rows in the database that correspond to deleted rows in the DataSet.</para>
        </summary><remarks>
            <para>If this property is not set and primary key information is present in the DataSet during Update, then DeleteCommand can be generated automatically by setting SelectCommand and using the HanaCommandBuilder. In that case, the HanaCommandBuilder generates any additional commands that you do not set. This generation logic requires key column information to be present in the SelectCommand.</para>
            <para>When DeleteCommand is assigned to an existing HanaCommand object, the HanaCommand object is not cloned. The DeleteCommand maintains a reference to the existing HanaCommand.</para>
        </remarks><seealso cref="P:Sap.Data.Hana.HanaDataAdapter.SelectCommand"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaDataAdapter.InsertCommand">
            <summary>
            <para>Specifies a HanaCommand that is executed against the database when the Update method is called that adds rows to the database to correspond to rows that were inserted in the DataSet.</para>
        </summary><remarks>
            <para>The HanaCommandBuilder does not require key columns to generate InsertCommand.</para>
            <para>When InsertCommand is assigned to an existing HanaCommand object, the HanaCommand is not cloned. The InsertCommand maintains a reference to the existing HanaCommand.</para>
            <para>If this command returns rows, then the rows may be added to the DataSet depending on how you set the UpdatedRowSource property of the HanaCommand object.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaDataAdapter.SelectCommand">
            <summary>
            <para>Specifies a HanaCommand that is used during Fill or FillSchema to obtain a result set from the database for copying into a DataSet.</para>
        </summary><remarks>
            <para>When SelectCommand is assigned to a previously created HanaCommand, the HanaCommand is not cloned. The SelectCommand maintains a reference to the previously created HanaCommand object.</para>
            <para>If the SelectCommand does not return any rows, then no tables are added to the DataSet, and no exception is raised.</para>
            <para>The SELECT statement can also be specified in the HanaDataAdapter constructor.</para>
        </remarks>	
        </member>
        <member name="P:Sap.Data.Hana.HanaDataAdapter.UpdateCommand">
            <summary>
            <para>Specifies a HanaCommand that is executed against the database when the Update method is called to update rows in the database that correspond to updated rows in the DataSet.</para>
        </summary><remarks>
            <para>During Update, if this property is not set and primary key information is present in the SelectCommand, then the UpdateCommand can be generated automatically if you set the SelectCommand property and use the HanaCommandBuilder. Then, any additional commands that you do not set are generated by the HanaCommandBuilder. This generation logic requires key column information to be present in the SelectCommand.</para>
            <para>When UpdateCommand is assigned to a previously created HanaCommand, the HanaCommand is not cloned. The UpdateCommand maintains a reference to the previously created HanaCommand object.</para>
            <para>If execution of this command returns rows, then these rows can be merged with the DataSet depending on how you set the UpdatedRowSource property of the HanaCommand object.</para>
        </remarks>	
        </member>
        <member name="T:Sap.Data.Hana.HanaDataAdapter.CommandRowPair">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaDecimal">
            <summary>
            <para>Represents a HANA decimal value.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.#ctor(System.String)">
            <summary>
            <para>Initializes a HanaDecimal object with a string value.</para>
        </summary><param name="stringRepresentation">
            The string representation of the HanaDecimal object.
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.#ctor(System.Decimal)">
            <summary>
            <para>Initializes a HanaDecimal object with a Microsoft .NET decimal value.</para>
        </summary><param name="decimalValue">
            A Microsoft .NET decimal value.
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.ToDecimal">
            <summary>
            <para>Returns a Microsoft .NET decimal value for this HanaDecimal object.</para>
        </summary><returns>
            <para>A Microsoft .NET decimal value.</para>
        </returns><remarks>
            <para>This method throws a ConversionException if the HanaDecimal object cannot be converted to a Microsoft .NET decimal value.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.ToString">
            <summary>
            <para>Returns the string representation for this HanaDecimal object.</para>
        </summary><returns>
            <para>A String value.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.Equals(System.Object)">
            <summary>
            <para>
                Determines whether the specified System.Object is equal to the current HanaDecimal object.
            </para>
        </summary><returns>
            <para>True if the specified object is equal to the current HanaDecimal object; false otherwise.</para>
        </returns><param name="obj">
            The object to compare with the current object.
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.GetHashCode">
            <summary>
            <para>Serves as a hash function for the HanaDecimal object.</para>
        </summary><returns>
            <para>A hash code for the current HanaDecimal object.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToByte(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToChar(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToDouble(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToInt16(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToInt32(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToInt64(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToSByte(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToSingle(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToString(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaDecimal.System#IConvertible#GetTypeCode">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaDataConvert">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaDataConvert.MapDbTypeToHanaDbType">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaDataConvert.MapHanaDbTypeToDbType">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaDataConvert.MapDotNetTypeToHanaType">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaDataConvert.MapHanaDbTypeToDotNetType">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaUnmanagedMemory">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaInternalDecimal">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaDate">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaTime">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaDateTime">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaDataItem">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaColumnName">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaColumnInfo">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaValue">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaParameterDM">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaServerInfo">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaPortInfo">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaConnectionProperty">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaDataReader">
            <summary>
            <para>A read-only, forward-only result set from a query or stored procedure.</para>
        </summary><remarks>
            <para>There is no constructor for HanaDataReader. To get a HanaDataReader object, execute a HanaCommand:</para>
            <code>HanaCommand cmd = new HanaCommand(
    "SELECT EmployeeID FROM Employees", conn );
HanaDataReader reader = cmd.ExecuteReader();</code>
            <para>You can only move forward through a HanaDataReader. If you need a more flexible object to manipulate results, then use a HanaDataAdapter.</para>
            <para>The HanaDataReader retrieves rows as needed, whereas the HanaDataAdapter must retrieve all rows of a result set before you can carry out any action on the object. For large result sets, this difference gives the HanaDataReader a much faster response time.</para>
            <para><b>Implements:</b> <see cref="T:System.Data.IDataReader"/>, <see cref="T:System.IDisposable"/>, <see cref="T:System.Data.IDataRecord"/>, <see cref="T:System.ComponentModel.IListSource"/></para>
            <para>For more information, see @olink targetdoc="hanafeatures" targetptr="accessing-hanadotnet-dev"@Data access and manipulation@/olink@.</para>
        </remarks><seealso cref="M:Sap.Data.Hana.HanaCommand.ExecuteReader"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.Finalize">
            <summary>
            <para>Destructs a HanaDataReader object.</para>
        </summary>		
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.Close">
            <summary>
            <para>Closes the HanaDataReader.</para>
        </summary><remarks>
            <para>Explicitly call the Close method when you are finished using the HanaDataReader.</para>
            <para>When running in autocommit mode, a COMMIT is issued as a side effect of closing the HanaDataReader.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.myDispose">
            <summary>
            <para>Frees the resources associated with the object.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetEnumerator">
            <summary>
            <para>Returns a <see cref="T:System.Collections.IEnumerator"/> that iterates through the HanaDataReader object.</para>
        </summary><returns>
	    <para>A <see cref="T:System.Collections.IEnumerator"/> for the HanaDataReader object.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaDataReader"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetBoolean(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a Boolean.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a Boolean.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the column.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaDataReader.GetOrdinal(System.String)"/><seealso cref="M:Sap.Data.Hana.HanaDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetByte(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a Byte.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a byte.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the column.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            <para>Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.</para>
        </summary><remarks>
            <para>GetBytes returns the number of available bytes in the field. In most cases this is the exact length of the field. However, the number returned may be less than the true length of the field if GetBytes has already been used to obtain bytes from the field. This may be the case, for example, when the HanaDataReader is reading a large data structure into a buffer.</para>
            <para>If you pass a buffer that is a null reference (Nothing in Visual Basic), then GetBytes returns the length of the field in bytes.</para>
            <para>No conversions are performed, so the data that is being retrieved must already be a byte array.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><param name="dataIndex">
            The index within the column value from which to read bytes. 
        </param><param name="buffer">
            An array in which to store the data. 
        </param><param name="bufferIndex">
            The index in the array to start copying data. 
        </param><param name="length">
            The maximum length to copy into the specified buffer. 
        </param><returns>
	    <para>The number of bytes read.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetChar(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a character.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a character.</para>
            <para>Call the HanaDataReader.IsDBNull method to check for null values before calling this method.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the column.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)"/><seealso cref="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            <para>Reads a stream of characters from the specified column offset into the buffer as an array starting at the given buffer offset.</para>
        </summary><remarks>
            <para>GetChars returns the number of available characters in the field. In most cases this is the exact length of the field. However, the number returned may be less than the true length of the field if GetChars has already been used to obtain characters from the field. This may be the case, for example, when the HanaDataReader is reading a large data structure into a buffer.</para>
            <para>If you pass a buffer that is a null reference (Nothing in Visual Basic), then GetChars returns the length of the field in characters.</para>
            <para>No conversions are performed, so the data that is being retrieved must already be a character array.</para>
            <para>For information about handling BLOBs, see @olink targetdoc="hanafeatures" targetptr="handling-blobs-adodotnet-hana"@BLOBs@/olink@.</para>
        </remarks><param name="ordinal">
            The zero-based column ordinal. 
        </param><param name="dataIndex">
            The index within the row from which to begin the read operation. 
        </param><param name="buffer">
            The buffer into which to copy data. 
        </param><param name="bufferIndex">
            The index for buffer to begin the read operation. 
        </param><param name="length">
            The number of characters to read. 
        </param><returns>
	    <para>The actual number of characters read.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetDataTypeName(System.Int32)">
            <summary>
            <para>Returns the name of the source data type.</para>
        </summary><param name="index">
            The zero-based column ordinal. 
        </param><returns>
	    <para>The name of the back-end data type.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetDateTime(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a DateTime object.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a DateTime object.</para>
            <para>Call the HanaDataReader.IsDBNull method to check for null values before calling this method.</para>
        </remarks><param name="ordinal">
            The zero-based column ordinal. 
        </param><returns>
	    <para>The value of the specified column.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetDateTimeOffset(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a DateTimeOffset object.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a DateTimeOffset object.</para>
            <para>Call the HanaDataReader.IsDBNull method to check for null values before calling this method.</para>
        </remarks><param name="ordinal">
            The zero-based column ordinal.
        </param><returns>
            <para>The value of the specified column.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetTimeSpan(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a TimeSpan object.</para>
        </summary><remarks>
            <para>The column must be an SAP HANA TIME data type. The data is converted to TimeSpan. The Days property of TimeSpan is always set to 0.</para>
            <para>Call HanaDataReader.IsDBNull method to check for NULL values before calling this method.</para>
            <para>For more information, see @olink targetdoc="hanafeatures" targetptr="hanadotnet-development-s-4163101"@Time values@/olink@.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the specified column.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetDecimal(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a Decimal object.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a Decimal object.</para>
            <para>Call the HanaDataReader.IsDBNull method to check for null values before calling this method.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the specified column.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetHanaDecimal(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a HanaDecimal object.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a decimal value.</para>
            <para>Call the HanaDataReader.IsDBNull method to check for null values before calling this method.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based.
        </param><returns>
            <para>The value of the specified column.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetDouble(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a double-precision floating-point number.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a double-precision floating-point number.</para>
            <para>Call the HanaDataReader.IsDBNull method to check for null values before calling this method.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the specified column.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetFieldType(System.Int32)">
            <summary>
            Returns the Type that is the data type of the object. 
        </summary><param name="index">
            The zero-based column ordinal. 
        </param><returns>
	    <para>The type that is the data type of the object.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetFloat(System.Int32)">
            <summary>
            Returns the value of the specified column as a single-precision floating-point number. 
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a single-precision floating-point number.</para>
            <para>Call the HanaDataReader.IsDBNull method to check for null values before calling this method.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the specified column.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetGuid(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a global unique identifier (GUID).</para>
        </summary><remarks>
            <para>The data that is being retrieved must already be a globally-unique identifier or binary(16).</para>
            <para>Call the HanaDataReader.IsDBNull method to check for null values before calling this method.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the specified column.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetInt16(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a 16-bit signed integer.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a 16-bit signed integer.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the specified column.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetInt32(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a 32-bit signed integer.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a 32-bit signed integer.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the specified column.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetInt64(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a 64-bit signed integer.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a 64-bit signed integer.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the specified column.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetName(System.Int32)">
            <summary>
            <para>Returns the name of the specified column.</para>
        </summary><param name="index">
            The zero-based index of the column. 
        </param><returns>
	    <para>The name of the specified column.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetOrdinal(System.String)">
            <summary>
            <para>Returns the column ordinal, given the column name.</para>
        </summary><remarks>
            <para>GetOrdinal performs a case-sensitive lookup first. If it fails, then a second case-insensitive search is made.</para>
            <para>GetOrdinal is Japanese kana-width insensitive.</para>
            <para>Because ordinal-based lookups are more efficient than named lookups, it is inefficient to call GetOrdinal within a loop. Save time by calling GetOrdinal once and assigning the results to an integer variable for use within the loop.</para>
        </remarks><param name="name">
            The column name. 
        </param><returns>
	    <para>The zero-based column ordinal.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetSchemaTable">
            <summary>
            <para>Returns a DataTable that describes the column metadata of the HanaDataReader.</para>
        </summary><remarks>
            <para>This method returns metadata about each column in the following order:</para>
            <list type="table">
            <listheader>
                <term>DataTable column</term> <term>Description</term> 
            </listheader>
            <item>
            <term>ColumnName</term> <term>The name of the column or a null reference (Nothing in Visual Basic) if the column has no name. If the column is aliased in the SQL query, then the alias is returned. In result sets, not all columns have names and not all column names are unique. </term> 
            </item>
            <item>
            <term>ColumnOrdinal</term> <term>The ID of the column. The value is in the range [0, FieldCount -1].</term> 
            </item>
            <item>
            <term>ColumnSize</term> <term>For sized columns, the maximum length of a value in the column. For other columns, this is the size in bytes of the data type.</term> 
            </item>
            <item>
            <term>NumericPrecision</term> <term>The precision of a numeric column or DBNull if the column is not numeric.</term> 
            </item>
            <item>
            <term>NumericScale</term> <term>The scale of a numeric column or DBNull if the column is not numeric.</term> 
            </item>
            <item>
            <term>IsUnique</term> <term>True if the column is a non-computed unique column in the table (BaseTableName) it is taken from.</term> 
            </item>
            <item>
            <term>IsKey</term> <term>True if the column is one of a set of columns in the result set that taken together from a unique key for the result set. The set of columns with IsKey set to true does not need to be the minimal set that uniquely identifies a row in the result set. </term> 
            </item>
            <item>
            <term>BaseServerName</term> <term>The name of the SAP HANA database server used by the HanaDataReader. </term> 
            </item>
            <item>
            <term>BaseCatalogName</term> <term>The name of the catalog in the database that contains the column. This value is always DBNull. </term> 
            </item>
            <item>
            <term>BaseColumnName</term><term>The original name of the column in the table BaseTableName of the database or DBNull if the column is computed or if this information cannot be determined.</term> 
            </item>
            <item>
            <term>BaseSchemaName</term> <term>The name of the schema in the database that contains the column. </term> 
            </item>
            <item>
            <term>BaseTableName</term> <term>The name of the table in the database that contains the column, or DBNull if column is computed or if this information cannot be determined.</term> 
            </item>
            <item>
            <term>DataType</term> <term>The Microsoft .NET data type that is most appropriate for this type of column.</term> 
            </item>
            <item>
            <term>AllowDBNull</term> <term>True if the column is nullable; false if the column is not nullable or if this information cannot be determined. </term> 
            </item>
            <item>
            <term>ProviderType</term> <term>The type of the column.</term> 
            </item>
            <item>
            <term>IsAliased</term> <term>True if the column name is an alias; false if it is not an alias.</term> 
            </item>
            <item>
            <term>IsExpression </term> <term>True if the column is an expression; false if it is a column value.</term> 
            </item>
            <item>
            <term>IsIdentity</term> <term>True if the column is an identity column; false if it is not an identity column. </term> 
            </item>
            <item>
            <term>IsAutoIncrement</term> <term>True if the column is an autoincrement or global autoincrement column; false otherwise (or if this information cannot be determined).</term> 
            </item>
            <item>
            <term>IsRowVersion</term> <term>True if the column contains a persistent row identifier that cannot be written to, and has no meaningful value except to identify the row.</term> 
            </item>
            <item>
            <term>IsHidden</term> <term>True if the column is hidden; false otherwise. </term> 
            </item>
            <item>
            <term>IsLong</term> <term>True if the column is a BLOB, CLOB, NCLOB, or a TEXT column; false otherwise.</term> 
            </item>
            <item>
            <term>IsReadOnly</term> <term>True if the column is read-only; false if the column is modifiable or if its access cannot be determined.</term> 
            </item>
            </list>
            <para>For more information about these columns, see the Microsoft .NET Framework documentation for SqlDataReader.GetSchemaTable.</para>
            <para>For more information, see @olink targetdoc="hanafeatures" targetptr="obtaining-schema-hanadotnet-dev"@HanaCommand: Fetch result set schema using GetSchemaTable@/olink@.</para>
        </remarks><returns>
	    <para>A DataTable that describes the column metadata.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetString(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as a string.</para>
        </summary><remarks>
            <para>No conversions are performed, so the data that is being retrieved must already be a string.</para>
            <para>Call the HanaDataReader.IsDBNull method to check for NULL values before calling this method.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the specified column.</para>
        </returns><seealso cref="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetValue(System.Int32)">
            <summary>
            <para>Returns the value of the specified column as an Object.</para>
        </summary><remarks>
            <para>This method returns DBNull for NULL database columns.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><returns>
	    <para>The value of the specified column as an object.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetValue(System.Int32,System.Int64,System.Int32)">
            <summary>
            <para>Returns a substring of the value of the specified column as an Object.</para>
        </summary><remarks>
            <para>This method returns DBNull for NULL database columns.</para>
        </remarks><param name="ordinal">
            An ordinal number indicating the column from which the value is obtained. The numbering is zero-based. 
        </param><param name="index">
            A zero-based index of the substring of the value to be obtained. 
        </param><param name="length">
            The length of the substring of the value to be obtained. 
        </param><returns>
	    <para>The substring value is returned as an object.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetValues(System.Object[])">
            <summary>
            <para>Gets all the columns in the current row.</para>
        </summary><remarks>
            <para>For most applications, the GetValues method provides an efficient means for retrieving all columns, rather than retrieving each column individually.</para>
            <para>You can pass an Object array that contains fewer than the number of columns contained in the resulting row. Only the amount of data the Object array holds is copied to the array. Also, you can pass an Object array whose length is more than the number of columns contained in the resulting row.</para>
            <para>This method returns DBNull for NULL database columns.</para>
        </remarks><param name="values">
            An array of objects that holds an entire row of the result set. 
        </param><returns>
	    <para>The number of objects in the array.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.IsDBNull(System.Int32)">
            <summary>
            <para>Returns a value indicating whether the column contains NULL values.</para>
        </summary><remarks>
            <para>Call this method to check for NULL column values before calling the typed get methods (for example, GetByte, GetChar, and so on) to avoid raising an exception.</para>
        </remarks><param name="ordinal">
            The zero-based column ordinal. 
        </param><returns>
	    <para>True if the specified column value is equivalent to DBNull; false otherwise.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.NextResult">
            <summary>
            <para>Advances the HanaDataReader to the next result set when processing queries that return multiple result sets.</para>
        </summary><remarks>
            <para>Used to process multiple result sets, which can be generated by executing batch SQL statements or stored procedures.</para>
            <para>By default, the data reader is positioned on the first result set.</para>
        </remarks><returns>
	    <para>True if there are more result sets; false otherwise.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.Read">
            <summary>
            <para>Reads the next row of the result set and moves the HanaDataReader to that row.</para>
        </summary><remarks>
            <para>The default position of the HanaDataReader is prior to the first record. Call Read to begin accessing any data.</para>
        </remarks><returns>
	    <para>True if there are more rows; false otherwise.</para>
        </returns><example>
            <para>The following code fills a listbox with the values in a single column of results.</para>
            <code>while( reader.Read() ) {
    listResults.Items.Add( reader.GetValue( 0 ).ToString() );
}
listResults.EndUpdate();
reader.Close();</code>

        </example>
        </member>
        <member name="M:Sap.Data.Hana.HanaDataReader.GetData(System.Int32)">
            <summary>
            <para>This method is not supported. When called, it throws an InvalidOperationException.</para>
        </summary><seealso cref="T:System.InvalidOperationException"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaDataReader.Depth">
            <summary>
            <para>Gets a value indicating the depth of nesting for the current row. The outermost table has a depth of zero.</para>
        </summary><value> The depth of nesting for the current row. </value>
        </member>
        <member name="P:Sap.Data.Hana.HanaDataReader.FieldCount">
            <summary>
            <para>Gets the number of columns in the result set.</para>
        </summary><value>The number of columns in the current record.</value>
        </member>
        <member name="P:Sap.Data.Hana.HanaDataReader.HasRows">
            <summary>
            <para>Gets a value that indicates whether the HanaDataReader contains one or more rows.</para>
        </summary><value>True if the HanaDataReader contains one or more rows; false otherwise.</value>
        </member>
        <member name="P:Sap.Data.Hana.HanaDataReader.IsClosed">
            <summary>
            <para>Gets a values that indicates whether the HanaDataReader is closed.</para>
        </summary><value>True if the HanaDataReader is closed; false otherwise.</value><remarks>
            <para>IsClosed and RecordsAffected are the only properties that you can use after the HanaDataReader is closed.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaDataReader.Item(System.Int32)">
            <summary>
            <para>Returns the value of a column in its native format. In C#, this property is the indexer for the HanaDataReader class.</para>
        </summary><param name="index">
            The column ordinal. 
        </param>
        </member>
        <member name="P:Sap.Data.Hana.HanaDataReader.Item(System.String)">
            <summary>
            <para>Returns the value of a column in its native format. In C#, this property is the indexer for the HanaDataReader class.</para>
        </summary><param name="name">
            The column name. 
        </param>
        </member>
        <member name="P:Sap.Data.Hana.HanaDataReader.RecordsAffected">
            <summary>
            The number of rows changed, inserted, or deleted by the execution of the SQL statement. 
        </summary><value>The number of rows changed, inserted, or deleted. This value is 0 if no rows were affected or the statement failed, or -1 for SELECT statements.</value><remarks>
            <para>The number of rows changed, inserted, or deleted. This value is 0 if no rows were affected or the statement failed, and -1 for SELECT statements.</para>
            <para>The value of this property is cumulative. For example, if two records are inserted in batch mode, then the value of RecordsAffected is 2.</para>
            <para>IsClosed and RecordsAffected are the only properties that you can use after the HanaDataReader is closed.</para>
        </remarks>
        </member>
        <member name="T:Sap.Data.Hana.HanaDataReader.HanaColumnMetaData">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaMessageType">
            <summary>
            <para>Identifies the type of message. This can be one of: Action, Info, Status, or Warning.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaMessageType.Action">
            <summary>
            <para>Message of type ACTION.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaMessageType.Info">
            <summary>
            <para>Message of type INFO.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaMessageType.Status">
            <summary>
            <para>Message of type STATUS.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaMessageType.Warning">
            <summary>
            <para>Message of type WARNING.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.HanaDbType">
            <summary>
            <para>Enumerates the SAP HANA database data types for Microsoft .NET.</para>
        </summary><remarks>
            <para>The table below lists which Microsoft .NET types are compatible with each HanaDbType. In the case of integral types, table columns can always be set using smaller integer types, but can also be set using larger types as long as the actual value is within the range of the type.</para>
            <list type="table">
            <listheader>
                <term>HanaDbType</term><term>Compatible Microsoft .NET type</term> <term>C# built-in type</term> <term>Visual Basic built-in type</term> 
            </listheader>
            <item>
            <term><b>AlphaNum </b></term> <term><see cref="T:System.String"/></term> <term>string</term> <term>String</term> 
            </item>
            <item>
            <term><b>BigInt</b></term> <term><see cref="T:System.Int64"/></term> <term>long</term> <term>Long</term> 
            </item>
            <item>
            <term><b>Blob</b></term> <term><see cref="T:System.Array"/></term> <term>Byte[]</term> <term>Byte()</term> 
            </item>
            <item>
            <term><b>Clob </b></term> <term><see cref="T:System.String"/></term> <term>string</term> <term>String</term>  
            </item>
            <item>
            <term><b>Date</b></term> <term><see cref="T:System.DateTime"/></term> <term>DateTime (no built-in type)</term> <term>Date</term> 
            </item>
            <item>
            <term><b>Decimal</b></term> <term><see cref="T:System.Decimal"/></term> <term>decimal</term> <term>Decimal</term> 
            </item>
            <item>
            <term><b>Double</b></term> <term><see cref="T:System.Double"/></term> <term>double</term> <term>Double</term> 
            </item>
            <item>
            <term><b>Integer</b></term> <term><see cref="T:System.Int32"/></term> <term>int</term> <term>Integer</term> 
            </item>
            <item>
            <term><b>NClob</b></term> <term><see cref="T:System.String"/></term> <term>string</term> <term>String</term> 
            </item>
            <item>
            <term><b>NVarChar</b></term> <term><see cref="T:System.String"/></term> <term>string</term> <term>String</term> 
            </item>
            <item>
            <term><b>Real</b></term> <term><see cref="T:System.Single"/></term> <term>float</term> <term>Single</term> 
            </item>
            <item>
            <term><b>SecondDate</b></term> <term><see cref="T:System.DateTime"/></term> <term>DateTime (no built-in type)</term> <term>Date</term> 
            </item>
            <item>
            <term><b>ShortText</b></term> <term><see cref="T:System.String"/></term> <term>string</term> <term>String</term> 
            </item>
            <item>
            <term><b>SmallDecimal</b></term> <term><see cref="T:System.Decimal"/></term> <term>decimal</term> <term>Decimal</term> 
            </item>
            <item>
            <term><b>SmallInt</b></term> <term><see cref="T:System.Int16"/></term> <term>short</term> <term>Short</term> 
            </item>
            <item>
            <term><b>Text</b></term> <term><see cref="T:System.String"/></term> <term>string</term> <term>String</term> 
            </item>
            <item>
            <term><b>Time</b></term> <term><see cref="T:System.TimeSpan"/></term> <term>TimeSpan (no built-in type)</term> <term>TimeSpan (no built-in type)</term> 
            </item>
            <item>
            <term><b>TimeStamp</b></term> <term><see cref="T:System.DateTime"/></term> <term>DateTime (no built-in type)</term> <term>Date</term> 
            </item>
            <item>
            <term><b>TinyInt</b></term> <term><see cref="T:System.Byte"/></term> <term>byte</term> <term>Byte</term> 
            </item>
            <item>
            <term><b>VarBinary</b></term> <term><see cref="T:System.Array"/></term> <term>Byte[]</term> <term>Byte()</term> 
            </item>
            <item>
            <term><b>VarChar</b></term> <term><see cref="T:System.String"/></term> <term>string</term> <term>String</term> 
            </item>
            </list>
            <para>Binary columns of length 16 are fully compatible with the UniqueIdentifier type.</para>
        </remarks><seealso cref="M:Sap.Data.Hana.HanaDataReader.GetFieldType(System.Int32)"/><seealso cref="M:Sap.Data.Hana.HanaDataReader.GetDataTypeName(System.Int32)"/>
            @hideinitializers
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.AlphaNum">
            <summary>
            <para>Variable-length character string which contains alpha-numeric characters. The maximum length is 127.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.BigInt">
            <summary>
            <para>Signed 64-bit integer.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.Blob">
            <summary>
            <para>Large binary data.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.Clob">
            <summary>
            <para>Large ASCII character data.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.Date">
            <summary>
            <para>The DATE data type consists of year, month, and day information to represent a date value.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.Decimal">
            <summary>
            <para>Exact numerical data, with a specified precision and scale.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.Double">
            <summary>
            <para>Double-precision floating-point number (8 bytes).</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.Integer">
            <summary>
            <para>Signed 32-bit integer.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.NClob">
            <summary>
            <para>Large unicode character data.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.NVarChar">
            <summary>
            <para>Variable-length unicode character set string with maximum length of 5000.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.Real">
            <summary>
            <para>Single-precision 32-bit floating-point number.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.SecondDate">
            <summary>
            <para>The SECONDDATE data type consists of year, month, day, hour, minute and second information to represent a date with time value.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.ShortText">
            <summary>
            <para>Variable-length character string that supports text search features and string search features.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.SmallDecimal">
            <summary>
            <para>The SMALLDECIMAL floating-point data type.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.SmallInt">
            <summary>
            <para>Signed 16-bit integer (-32768 - 32767).</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.Text">
            <summary>
            <para>The TEXT data type supports textsearch-features. Selecting a TEXT-column yields a column of type NCLOB.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.Time">
            <summary>
            <para>The TIME data type consists of hour, minute, and second to represent a time value.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.TimeStamp">
            <summary>
            <para>The TIMESTAMP data type consists of date and time information.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.TinyInt">
            <summary>
            <para>Unsigned 8-bit integer (0 - 255).</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.VarBinary">
            <summary>
            <para>Binary data with maximum length of 5000.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.VarChar">
            <summary>
            <para>Variable-length ASCII character string with maximum length of 5000.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaDbType.TableType">
            <summary>
            <para>User-defined table type.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.DotNetType">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaError">
            <summary>
            <para>Collects information relevant to a warning or error returned by the data source.</para>
        </summary><remarks>
            <para>There is no constructor for HanaError.</para>
            <para>For information about error handling, see @olink targetdoc="hanafeatures" targetptr="error-hanadotnet-development"@Error handling@/olink@.</para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaError.ToString">
            <summary>
            <para>The complete text of the error message.</para>
        </summary><example>
            <para>The return value is a string is in the form <b>HanaError:</b>, followed by the message. For example:</para>
            <code>HanaError:UserId or Password not valid.</code>
        </example>
        </member>
        <member name="P:Sap.Data.Hana.HanaError.NativeError">
            <summary>
            <para>Returns database-specific error information.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaError.Message">
            <summary>
            <para>Returns a short description of the error.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaError.SqlState">
            <summary>
            <para>The five-character SQLSTATE following the ANSI SQL standard.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaError.Source">
            <summary>
            <para>Returns the name of the provider that generated the error.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.HanaErrorCollection">
            <summary>
            <para>Collects all errors generated by the data provider.</para>
        </summary><remarks>
            <para>There is no constructor for HanaErrorCollection. Typically, a HanaErrorCollection is obtained from the HanaException.Errors property.</para>
            <para><b>Implements:</b> <see cref="T:System.Collections.ICollection"/>, <see cref="T:System.Collections.IEnumerable"/></para>
            <para>For information about error handling, see @olink targetdoc="hanafeatures" targetptr="error-hanadotnet-development"@Error handling@/olink@.</para>
        </remarks><seealso cref="P:Sap.Data.Hana.HanaException.Errors"/><seealso cref="P:System.Data.SqlClient.SqlClientFactory.CanCreateDataSourceEnumerator"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaErrorCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            <para>Copies the elements of the HanaErrorCollection into an array, starting at the given index within the array.</para>
        </summary><param name="array">
            The array into which to copy the elements. 
        </param><param name="index">
            The starting index of the array. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaErrorCollection.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through the HanaErrorCollection.</para>
        </summary><returns>
	    <para>A <see cref="T:System.Collections.IEnumerator"/> for the HanaErrorCollection. </para>
        </returns>
        </member>
        <member name="P:Sap.Data.Hana.HanaErrorCollection.Count">
            <summary>
            <para>Returns the number of errors in the collection.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaErrorCollection.Item(System.Int32)">
            <summary>
            <para>Returns the error at the specified index.</para>
        </summary><value>A HanaError object that contains the error at the specified index.</value><param name="index">
            The zero-based index of the error to retrieve. 
        </param><seealso cref="T:Sap.Data.Hana.HanaError"/>
        </member>
        <member name="T:Sap.Data.Hana.HanaException">
            <summary>
            <para>The exception that is thrown when the SAP HANA database server returns a warning or error.</para>
        </summary><remarks>
            <para>There is no constructor for HanaException. Typically, a HanaException object is declared in a catch. For example:</para>
            <code>...
catch( HanaException ex )
{
    MessageBox.Show( ex.Errors[0].Message, "Error" );
}</code>
            <para>For information about error handling, see @olink targetdoc="hanafeatures" targetptr="error-hanadotnet-development"@Error handling@/olink@.</para>

        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Sets the SerializationInfo with information about the exception. Overrides <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>.</para>
        </summary><param name="info">
            The SerializationInfo that holds the serialized object data about the exception being thrown. 
        </param><param name="context">
            The StreamingContext that contains contextual information about the source or destination. 
        </param>
        </member>
        <member name="P:Sap.Data.Hana.HanaException.Errors">
            <summary>
            <para>Returns a collection of one or more <see cref="T:Sap.Data.Hana.HanaError"/> objects.</para>
        </summary><remarks>
            <para>The HanaErrorCollection object always contains at least one instance of the HanaError object.</para>
        </remarks><seealso cref="T:Sap.Data.Hana.HanaErrorCollection"/><seealso cref="T:Sap.Data.Hana.HanaError"/>        
        </member>
        <member name="P:Sap.Data.Hana.HanaException.Message">
            <summary>
            <para>Returns the text describing the error.</para>
        </summary><remarks>
            <para>This method returns a single string that contains a concatenation of all of the Message properties of all of the HanaError objects in the Errors collection. Each message, except the last one, is followed by a carriage return.</para>
        </remarks><seealso cref="T:Sap.Data.Hana.HanaError"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaException.Source">
            <summary>
            <para>Returns the name of the provider that generated the error.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaException.NativeError">
            <summary>
            <para>Returns database-specific error information.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.HanaFactory">
            <summary>
            <para>Represents a set of methods for creating instances of the Sap.Data.Hana provider's implementation of the data source classes.</para>
        </summary><remarks>
            <para>There is no constructor for HanaFactory.</para>
            <para>DbProviderFactories and DbProviderFactory make provider independent code easier to write. To use them with SAP HANA, specify Sap.Data.Hana as the provider invariant name passed to GetFactory. For example:</para>
            <code>' Visual Basic
Dim factory As DbProviderFactory = _
  DbProviderFactories.GetFactory( "Sap.Data.Hana" )
Dim conn As DbConnection = _
  factory.CreateConnection()

// C#
DbProviderFactory factory = 
		DbProviderFactories.GetFactory("Sap.Data.Hana" );
DbConnection conn = factory.CreateConnection();</code>
            <para>In this example, conn is created as a HanaConnection object.</para>
            <para>For an explanation of provider factories and generic programming in Microsoft ADO.NET 2.0, see <a href="http://msdn.microsoft.com/en-us/library/ms379620.aspx">Generic Coding with the ADO.NET 2.0 Base Classes and Factories</a>.</para>
        </remarks>
        </member>
        <member name="F:Sap.Data.Hana.HanaFactory.Instance">
            <summary>
            <para>Represents the singleton instance of the HanaFactory class.</para>
        </summary><remarks>
            <para>HanaFactory is a singleton class, which means only this instance of this class can exist.</para>
            <para>Normally you would not use this field directly. Instead, you get a reference to this instance of HanaFactory using <see cref="M:System.Data.Common.DbProviderFactories.GetFactory(System.String)"/>. For an example, see the HanaFactory description.</para>
        </remarks><seealso cref="T:Sap.Data.Hana.HanaFactory"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaFactory.CreateCommand">
            <summary>
            <para>Returns a strongly typed <see cref="T:System.Data.Common.DbCommand"/> instance.</para>
        </summary><returns>
	    <para>A new HanaCommand object typed as DbCommand.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaCommand"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaFactory.CreateConnection">
            <summary>
            <para>Returns a strongly typed <see cref="T:System.Data.Common.DbConnection"/> instance.</para>
        </summary><returns>
	    <para>A new HanaConnection object typed as DbConnection.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaConnection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaFactory.CreateCommandBuilder">
            <summary>
            <para>Returns a strongly typed <see cref="T:System.Data.Common.DbCommandBuilder"/> instance.</para>
        </summary><returns>
	    <para>A new HanaCommandBuilder object typed as DbCommandBuilder.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaCommandBuilder"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaFactory.CreateDataAdapter">
            <summary>
            <para>Returns a strongly typed <see cref="T:System.Data.Common.DbDataAdapter"/> instance.</para>
        </summary><returns>
	    <para>A new HanaDataAdapter object typed as DbDataAdapter.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaDataAdapter"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaFactory.CreateParameter">
            <summary>
            <para>Returns a strongly typed <see cref="T:System.Data.Common.DbParameter"/> instance.</para>
        </summary><returns>
	    <para>A new HanaParameter object typed as DbParameter.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameter"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaFactory.CreatePermission(System.Security.Permissions.PermissionState)">
            <summary>
            <para>Returns a strongly-typed CodeAccessPermission instance.</para>
        </summary><param name="state">
            A member of the <see cref="T:System.Security.Permissions.PermissionState"/> enumeration.
        </param><returns>
	    <para>A new HanaPermission object typed as CodeAccessPermission.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaPermission"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaFactory.CreateConnectionStringBuilder">
            <summary>
            <para>Returns a strongly typed <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> instance.</para>
        </summary><returns>
	    <para>A new HanaConnectionStringBuilder object typed as DbConnectionStringBuilder.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaConnectionStringBuilder"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaFactory.CanCreateDataSourceEnumerator">
            <summary>
            <para>Always returns false, which indicates that a HanaDataSourceEnumerator object cannot be created.</para>
        </summary><returns>
	    <para>False.</para>
        </returns>
        </member>
        <member name="T:Sap.Data.Hana.HanaDefault">
            <summary>
            <para>Represents a parameter with a default value.</para>
        </summary><remarks>
            <para>There is no constructor for HanaDefault.</para>
            <code>HanaParameter parm = new HanaParameter();
parm.Value = HanaDefault.Value;</code>

        </remarks>
        </member>
        <member name="F:Sap.Data.Hana.HanaDefault.Value">
            <summary>
            <para>Gets the value for a default parameter. This field is read-only and static.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.HanaParameter">
            <summary>
            <para>Represents a parameter to a HanaCommand, and optionally, its mapping to a DataSet column.</para>
        </summary><remarks>
            <para><b>Implements:</b> <see cref="T:System.Data.IDbDataParameter"/>, <see cref="T:System.Data.IDataParameter"/>, <see cref="T:System.ICloneable"/></para>
        </remarks>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameter.Finalize">
            <summary>
            <para>Destructs a HanaParameter object.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameter.#ctor">
            <summary>
            <para>Initializes a HanaParameter object with null (Nothing in Visual Basic) as its value.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameter.#ctor(System.String,System.Object)">
            <summary>
            <para>Initializes a HanaParameter object with the specified parameter name and value. This constructor is not recommended; it is provided for compatibility with other data providers.</para>
        </summary><param name="parameterName">
            The name of the parameter.
        </param><param name="value">
            An Object that is the value of the parameter.
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameter.#ctor(System.String,Sap.Data.Hana.HanaDbType)">
            <summary>
            <para>Initializes a HanaParameter object with the specified parameter name and data type.</para>
        </summary><remarks>
        </remarks><param name="parameterName">
            The name of the parameter.
        </param><param name="dbType">
            One of the HanaDbType values.
        </param><seealso cref="P:Sap.Data.Hana.HanaParameter.HanaDbType"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameter.#ctor(System.String,Sap.Data.Hana.HanaDbType,System.Int32)">
            <summary>
            <para>Initializes a HanaParameter object with the specified parameter name and data type.</para>
        </summary><remarks>
        </remarks><param name="parameterName">
            The name of the parameter.
        </param><param name="dbType">
            One of the HanaDbType values.
        </param><param name="size">
            The length of the parameter.
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameter.#ctor(System.String,Sap.Data.Hana.HanaDbType,System.Int32,System.String)">
            <summary>
            <para>Initializes a HanaParameter object with the specified parameter name, data type, and length.</para>
        </summary><remarks>
        </remarks><param name="parameterName">
            The name of the parameter.
        </param><param name="dbType">
            One of the HanaDbType values.
        </param><param name="size">
            The length of the parameter.
        </param><param name="sourceColumn">
            The name of the source column to map.
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameter.#ctor(System.String,Sap.Data.Hana.HanaDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Initializes a HanaParameter object with the specified parameter name, data type, length, direction, nullability, numeric precision, numeric scale, source column, source version, and value.</para>
        </summary><param name="parameterName">
            The name of the parameter.
        </param><param name="dbType">
            One of the HanaDbType values.
        </param><param name="size">
            The length of the parameter.
        </param><param name="direction">
            One of the ParameterDirection values.
        </param><param name="isNullable">
            True if the value of the field can be null; false otherwise.
        </param><param name="precision">
            The total number of digits to the left and right of the decimal point to which Value is resolved.
        </param><param name="scale">
            The total number of decimal places to which Value is resolved.
        </param><param name="sourceColumn">
            The name of the source column to map.
        </param><param name="sourceVersion">
            One of the DataRowVersion values.
        </param><param name="value">
            An Object that is the value of the parameter.
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameter.System#ICloneable#Clone">
            <summary>
            <para>Creates a new instance of the HanaParameter class with the same value as an existing instance.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameter.ResetDbType">
            <summary>
            <para>Resets the type (the values of DbType and HanaDbType) associated with this HanaParameter.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameter.ToString">
            <summary>
            <para>Returns a string containing the ParameterName.</para>
        </summary><returns>
	    <para>The name of the parameter.</para>
        </returns>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.DbType">
            <summary>
            <para>Gets and sets the DbType of the parameter.</para>
        </summary><remarks>
            <para>The HanaDbType and DbType are linked. Setting the DbType changes the HanaDbType to a supporting HanaDbType.</para>
            <para>The value must be a member of the HanaDbType enumerator.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.Direction">
            <summary>
            <para>Gets and sets a value indicating whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.</para>
        </summary><value>One of the ParameterDirection values.</value><remarks>
            <para>If the ParameterDirection is output, and execution of the associated HanaCommand does not return a value, then the HanaParameter object contains a null value. After the last row from the last result set is read, the Output, InputOut, and ReturnValue parameters are updated.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.IsNullable">
            <summary>
            <para>Gets and sets a value indicating whether the parameter accepts null values.</para>
        </summary><remarks>
            <para>This property is true if null values are accepted; otherwise, it is false. The default is false. Null values are handled using the DBNull class.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.Offset">
            <summary>
            <para>Gets and sets the offset to the Value property.</para>
        </summary><value>The offset to the value. The default is 0.</value>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.ParameterName">
            <summary>
            <para>Gets and sets the name of the HanaParameter.</para>
        </summary><value>The default is an empty string.</value><remarks>
            <para>The data provider uses positional parameters that are marked with a question mark (?) instead of named parameters.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.Precision">
            <summary>
            <para>Gets and sets the maximum number of digits used to represent the Value property.</para>
        </summary><value>The value of this property is the maximum number of digits used to represent the Value property. The default value is 0, which indicates that the data provider sets the precision for the Value property.</value><remarks>
            <para>The Precision property is only used for decimal and numeric input parameters.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.Scale">
            <summary>
            <para>Gets and sets the number of decimal places to which Value is resolved.</para>
        </summary><value>The number of decimal places to which Value is resolved. The default is 0.</value><remarks>
            <para>The Scale property is only used for decimal and numeric input parameters.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.Size">
            <summary>
            <para>Gets and sets the maximum size, in bytes, of the data within the column.</para>
        </summary><value>The value of this property is the maximum size, in bytes, of the data within the column. The default value is inferred from the parameter value.</value><remarks>
            <para>The value of this property is the maximum size, in bytes, of the data within the column. The default value is inferred from the parameter value.</para>
            <para>The Size property is used for binary and string types.</para>
            <para>For variable length data types, the Size property describes the maximum amount of data to transmit to the SAP HANA database server. For example, the Size property can be used to limit the amount of data sent to the SAP HANA database server for a string value to the first one hundred bytes.</para>
            <para>If Size is not explicitly set, then it is inferred from the actual size of the specified parameter value. For fixed width data types, the value of Size is ignored. It can be retrieved for informational purposes, and returns the maximum amount of bytes the provider uses when transmitting the value of the parameter to the SAP HANA database server.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.SourceColumn">
            <summary>
            <para>Gets and sets the name of the source column mapped to the DataSet and used for loading or returning the value.</para>
        </summary><value>A string specifying the name of the source column mapped to the DataSet and used for loading or returning the value.</value><remarks>
            <para>When SourceColumn is set to anything other than an empty string, the value of the parameter is retrieved from the column with the SourceColumn name. If Direction is set to Input, then the value is taken from the DataSet. If Direction is set to Output, then the value is taken from the data source. A Direction of InputOutput is a combination of both.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.SourceVersion">
            <summary>
            <para>Gets and sets the DataRowVersion to use when loading Value.</para>
        </summary><remarks>
            <para>Used by UpdateCommand during an Update operation to determine whether the parameter value is set to Current or Original. This property allows primary keys to be updated. This property is ignored by InsertCommand and DeleteCommand. This property is set to the version of the DataRow used by the Item property, or the GetChildRows method of the DataRow object.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.HanaDbType">
            <summary>
            <para>The HanaDbType of the parameter.</para>
        </summary><remarks>
            <para>The HanaDbType and DbType are linked. Setting the HanaDbType changes the DbType to a supporting DbType.</para>
            <para>The value must be a member of the HanaDbType enumerator.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.SourceColumnNullMapping">
            <summary>
            <para>Gets and sets value that indicates whether the source column is nullable. This property allows HanaCommandBuilder to generate Update statements for nullable columns correctly.</para>
        </summary><remarks>
            <para>If the source column is nullable, then true is returned; otherwise, false is returned.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameter.Value">
            <summary>
            <para>Gets and sets the value of the parameter.</para>
        </summary><value>An Object that specifies the value of the parameter.</value><remarks>
            <para>For input parameters, the value is bound to the HanaCommand that is sent to the SAP HANA database server. For output and return value parameters, the value is set on completion of the HanaCommand and after the HanaDataReader is closed.</para>
            <para>When sending a null parameter value to the SAP HANA database server, specify DBNull, not null. The null value in the system is an empty object that has no value. DBNull is used to represent null values.</para>
            <para>If the application specifies the database type, then the bound value is converted to that type when the data provider sends the data to the SAP HANA database server. The provider attempts to convert any type of value if it supports the IConvertible interface. Conversion errors may result if the specified type is not compatible with the value.</para>
            <para>Both the DbType and HanaDbType properties can be inferred by setting the Value.</para>
            <para>The Value property is overwritten by Update.</para>
        </remarks>
        </member>
        <member name="T:Sap.Data.Hana.HanaParameter.HanaParameterConverter">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaParameterCollection">
            <summary>
            <para>Represents all parameters to a HanaCommand object and, optionally, their mapping to a DataSet column.</para>
        </summary><remarks>
            <para>There is no constructor for HanaParameterCollection. You obtain a HanaParameterCollection object from the HanaCommand.Parameters property of a HanaCommand object.</para>
        </remarks><seealso cref="T:Sap.Data.Hana.HanaCommand"/><seealso cref="P:Sap.Data.Hana.HanaCommand.Parameters"/><seealso cref="T:Sap.Data.Hana.HanaParameter"/><seealso cref="T:Sap.Data.Hana.HanaParameterCollection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.GetParameter(System.Int32)">
            <summary>
            <para>Returns a parameter from the HanaParameterCollection object.</para>
        </summary><param name="index">
            The zero-based index of the parameter within the collection. 
        </param><returns>
	    <para>A <see cref="T:System.Data.Common.DbParameter"/> from HanaParameterCollection object.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameterCollection"/>        
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.GetParameter(System.String)">
            <summary>
            <para>Returns a parameter from the HanaParameterCollection object.</para>
        </summary><param name="parameterName">
            The name of the parameter to locate. 
        </param><returns>
	    <para>A <see cref="T:System.Data.Common.DbParameter"/> from HanaParameterCollection object.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameterCollection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            <para>Sets a parameter in the HanaParameterCollection object.</para>
        </summary><param name="index">
	    The zero-based index of the parameter to set.
        </param><param name="value">
	    A <see cref="T:System.Data.Common.DbParameter"/> to be inserted into the HanaParameterCollection object.
        </param><seealso cref="T:Sap.Data.Hana.HanaParameterCollection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            <para>Sets a parameter in the HanaParameterCollection object.</para>
        </summary><param name="parameterName">
            The name of the parameter to set. 
        </param><param name="value">
	    A <see cref="T:System.Data.Common.DbParameter"/> to be inserted into the HanaParameterCollection object.
        </param><seealso cref="T:Sap.Data.Hana.HanaParameterCollection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.Add(System.Object)">
            <summary>
            <para>Adds a HanaParameter object to this collection.</para>
        </summary><param name="value">
            The HanaParameter object to add to the collection. 
        </param><returns>
	    <para>The index of the new HanaParameter object.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameter"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.Add(Sap.Data.Hana.HanaParameter)">
            <summary>
            <para>Adds a HanaParameter object to this collection.</para>
        </summary><param name="value">
            The HanaParameter object to add to the collection. 
        </param><returns>
	    <para>The new HanaParameter object.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.Add(System.String,System.Object)">
            <summary>
            <para>Adds a HanaParameter object to this collection, created using the specified parameter name and value, to the collection.</para>
        </summary><remarks>
            <para>Because of the special treatment of the 0 and 0.0 constants and the way overloaded methods are resolved, explicitly cast constant values to the desired object type when using this method.</para>
        </remarks><param name="parameterName">
            The name of the parameter. 
        </param><param name="value">
            The value of the parameter to add to the connection. 
        </param><returns>
	    <para>The new HanaParameter object.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameter"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.Add(System.String,Sap.Data.Hana.HanaDbType)">
            <summary>
            <para>Adds a HanaParameter object to this collection, created using the specified parameter name and data type, to the collection.</para>
        </summary><param name="parameterName">
            The name of the parameter. 
        </param><param name="hanaDbType">
            One of the HanaDbType values. 
        </param><returns>
	    <para>The new HanaParameter object.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaDbType"/><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.Add(Sap.Data.Hana.HanaParameter)"/><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.Add(System.String,System.Object)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.Add(System.String,Sap.Data.Hana.HanaDbType,System.Int32)">
            <summary>
            <para>Adds a HanaParameter object to this collection, created using the specified parameter name, data type, and length, to the collection.</para>
        </summary><param name="parameterName">
            The name of the parameter. 
        </param><param name="hanaDbType">
            One of the HanaDbType values. 
        </param><param name="size">
            The length of the parameter. 
        </param><returns>
	    <para>The new HanaParameter object.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaDbType"/><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.Add(Sap.Data.Hana.HanaParameter)"/><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.Add(System.String,System.Object)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.Add(System.String,Sap.Data.Hana.HanaDbType,System.Int32,System.String)">
            <summary>
            <para>Adds a HanaParameter object to this collection, created using the specified parameter name, data type, length, and source column name, to the collection.</para>
        </summary><param name="parameterName">
            The name of the parameter. 
        </param><param name="hanaDbType">
            One of the HanaDbType values. 
        </param><param name="size">
            The length of the column. 
        </param><param name="sourceColumn">
            The name of the source column to map. 
        </param><returns>
	    <para>The new HanaParameter object.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaDbType"/><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.Add(Sap.Data.Hana.HanaParameter)"/><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.Add(System.String,System.Object)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
	    <para>Adds a value to the end of this collection.</para>
	</summary><param name="parameterName">
	    The name of the parameter.
	</param><param name="value">
	    The value to be added.
	</param><returns>
	    <para>The new HanaParameter object.</para>
	</returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.AddRange(System.Array)">
            <summary>
            <para>Adds an array of values to the end of the HanaParameterCollection.</para>
        </summary><param name="values">
            The values to add. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.AddRange(Sap.Data.Hana.HanaParameter[])">
            <summary>
            <para>Adds an array of values to the end of the HanaParameterCollection.</para>
        </summary><param name="values">
            An array of HanaParameter objects to add to the end of this collection. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.Contains(System.Object)">
            <summary>
            <para>Indicates whether a HanaParameter object exists in the collection.</para>
        </summary><param name="value">
            The HanaParameter object to find. 
        </param><returns>
	    <para>True if the collection contains the HanaParameter object; false otherwise.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameter"/><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.Contains(System.String)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.Contains(System.String)">
            <summary>
            <para>Indicates whether a HanaParameter object exists in the collection.</para>
        </summary><param name="value">
            The name of the parameter to search for. 
        </param><returns>
	    <para>True if the collection contains the HanaParameter object; false otherwise.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameter"/><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.Contains(System.Object)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            <para>Copies HanaParameter objects from the HanaParameterCollection to the specified array.</para>
        </summary><param name="array">
            The array to copy the HanaParameter objects into. 
        </param><param name="index">
            The starting index of the array. 
        </param><seealso cref="T:Sap.Data.Hana.HanaParameter"/><seealso cref="T:Sap.Data.Hana.HanaParameterCollection"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.IndexOf(System.Object)">
            <summary>
            <para>Returns the location of the HanaParameter object in the collection.</para>
        </summary><param name="value">
            The HanaParameter object to locate. 
        </param><returns>
	    <para>The zero-based location of the HanaParameter object in the collection.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameter"/><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.IndexOf(System.String)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.IndexOf(System.String)">
            <summary>
            <para>Returns the location of the HanaParameter object in the collection.</para>
        </summary><param name="parameterName">
            The name of the parameter to locate. 
        </param><returns>
	    <para>The zero-based index of the HanaParameter object in the collection.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameter"/><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.IndexOf(System.Object)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            <para>Inserts a HanaParameter object in the collection at the specified index.</para>
        </summary><param name="index">
            The zero-based index where the parameter is to be inserted within the collection. 
        </param><param name="value">
            The HanaParameter object to add to the collection. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.Remove(System.Object)">
            <summary>
            <para>Removes the specified HanaParameter object from the collection.</para>
        </summary><param name="value">
            The HanaParameter object to remove from the collection. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the specified HanaParameter object from the collection.</para>
        </summary><param name="index">
            The zero-based index of the parameter to remove. 
        </param><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.RemoveAt(System.String)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.RemoveAt(System.String)">
            <summary>
            <para>Removes the specified HanaParameter object from the collection.</para>
        </summary><param name="parameterName">
            The name of the HanaParameter object to remove. 
        </param><seealso cref="M:Sap.Data.Hana.HanaParameterCollection.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaParameterCollection.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through the HanaParameterCollection.</para>
        </summary><returns>
	    <para>A <see cref="T:System.Collections.IEnumerator"/> for the HanaParameterCollection object.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameterCollection"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameterCollection.Count">
            <summary>
            <para>Returns the number of HanaParameter objects in the collection.</para>
        </summary><value>The number of HanaParameter objects in the collection.</value><seealso cref="T:Sap.Data.Hana.HanaParameter"/><seealso cref="T:Sap.Data.Hana.HanaParameterCollection"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameterCollection.Item(System.Int32)">
            <summary>
            <para>Gets and sets the HanaParameter object at the specified index.</para>
        </summary><value>A HanaParameter object.</value><remarks>
            <para>In C#, this property is the indexer for the HanaParameterCollection object.</para>
        </remarks><param name="index">
            The zero-based index of the parameter to retrieve. 
        </param><returns>
	    <para>The HanaParameter at the specified index.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameter"/><seealso cref="T:Sap.Data.Hana.HanaParameterCollection"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameterCollection.Item(System.String)">
            <summary>
            <para>Gets and sets the HanaParameter object at the specified index.</para>
        </summary><value>A HanaParameter object.</value><remarks>
            <para>In C#, this property is the indexer for the HanaParameterCollection object.</para>
        </remarks><param name="parameterName">
            The name of the parameter to retrieve. 
        </param><returns>
	    <para>The HanaParameter object with the specified name.</para>
        </returns><seealso cref="T:Sap.Data.Hana.HanaParameter"/><seealso cref="T:Sap.Data.Hana.HanaParameterCollection"/><seealso cref="P:Sap.Data.Hana.HanaDataReader.Item(System.Int32)"/><seealso cref="M:Sap.Data.Hana.HanaDataReader.GetOrdinal(System.String)"/><seealso cref="M:Sap.Data.Hana.HanaDataReader.GetValue(System.Int32)"/><seealso cref="M:Sap.Data.Hana.HanaDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameterCollection.IsSynchronized">
            <summary>
            <para>Gets a value that indicates whether the HanaParameterCollection object is synchronized.</para>
        </summary><value>True if this collection is synchronized; false otherwise.</value>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameterCollection.SyncRoot">
            <summary>
            <para>Gets an object that can be used to synchronize access to the HanaParameterCollection.</para>
        </summary>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameterCollection.IsReadOnly">
            <summary>
            <para>Gets a value that indicates whether the HanaParameterCollection is read-only.</para>
        </summary><value>True if this collection is read-only; false otherwise.</value>
        </member>
        <member name="P:Sap.Data.Hana.HanaParameterCollection.IsFixedSize">
            <summary>
            <para>Gets a value that indicates whether the HanaParameterCollection has a fixed size.</para>
        </summary><value>True if this collection has a fixed size; false otherwise.</value>
        </member>
        <member name="T:Sap.Data.Hana.HanaPermission">
            <summary>
            <para>Enables the data provider to ensure that a user has a security level adequate to access an SAP HANA data source.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaPermission.#ctor(System.Security.Permissions.PermissionState)">
            <summary>
            <para>Initializes a new instance of the HanaPermission class.</para>
        </summary><param name="state">
            One of the PermissionState values. 
        </param>
        </member>
        <member name="M:Sap.Data.Hana.HanaPermission.CreateInstance">
            <summary>
            <para>Creates a new instance of a HanaPermission class.</para>
        </summary><returns>
	    <para>A new HanaPermission object.</para>
        </returns>
        </member>
        <member name="T:Sap.Data.Hana.HanaPermissionAttribute">
            <summary>
            <para>Associates a security action with a custom security attribute.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>
            <para>Initializes a new instance of the HanaPermissionAttribute class.</para>
        </summary><param name="action">
            One of the SecurityAction values representing an action that can be performed using declarative security. 
        </param><returns>
	    <para>A HanaPermissionAttribute object.</para>
        </returns>
        </member>
        <member name="M:Sap.Data.Hana.HanaPermissionAttribute.CreatePermission">
            <summary>
            <para>Returns a HanaPermission object that is configured according to the attribute properties.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.PInvokeMethods">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaRes">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaTrace">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaIsolationLevel">
            <summary>
            <para>Specifies SAP HANA database isolation levels. This class augments the <see cref="T:System.Data.IsolationLevel"/> class.</para>
        </summary><remarks>
            <para>The data provider supports all SAP HANA isolation levels. BeginTransaction has been overloaded so it can take either an IsolationLevel or a HanaIsolationLevel. There is a new property in HanaTransaction called HanaIsolationLevel that gets the HanaIsolationLevel.</para>
            <para>See the SAP HANA SQL Reference for more information.</para>
        </remarks>
            @hideinitializers
        </member>
        <member name="F:Sap.Data.Hana.HanaIsolationLevel.ReadUncommitted">
            <summary>
            <para>This isolation level is not supported by SAP HANA. READ COMMITTED is used instead.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaIsolationLevel.ReadCommitted">
            <summary>
            <para>Sets the isolation level to READ COMMITTED.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaIsolationLevel.RepeatableRead">
            <summary>
            <para>Sets the isolation level to REPEATABLE READ.</para>
        </summary>
        </member>
        <member name="F:Sap.Data.Hana.HanaIsolationLevel.Serializable">
            <summary>
            <para>Sets the isolation level to SERIALIZABLE.</para>
        </summary>
        </member>
        <member name="T:Sap.Data.Hana.HanaTransaction">
            <summary>
            <para>Represents a SQL transaction.</para>
        </summary><remarks>
            <para>There is no constructor for HanaTransaction. To obtain a HanaTransaction object, use one of the BeginTransaction methods. To associate a command with a transaction, use the HanaCommand.Transaction property.</para>
            <para>For more information, see @olink targetdoc="hanafeatures" targetptr="transaction-hanadotnet-development"@Transaction processing@/olink@.</para>
        </remarks><seealso cref="M:Sap.Data.Hana.HanaConnection.BeginTransaction"/><seealso cref="M:Sap.Data.Hana.HanaConnection.BeginTransaction(Sap.Data.Hana.HanaIsolationLevel)"/><seealso cref="P:Sap.Data.Hana.HanaCommand.Transaction"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaTransaction.Finalize">
            <summary>
            <para>Destructs a HanaTransaction object.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaTransaction.Dispose(System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="transaction.xml" path="doc/member[@name=&quot;dispose&quot;]/*"/>
        </member>
        <member name="M:Sap.Data.Hana.HanaTransaction.Commit">
            <summary>
            <para>Commits the database transaction.</para>
        </summary>
        </member>
        <member name="M:Sap.Data.Hana.HanaTransaction.Rollback">
            <summary>
            <para>Rolls back a transaction from a pending state.</para>
        </summary><remarks>
            <para>The transaction can only be rolled back from a pending state (after BeginTransaction has been called, but before Commit is called).</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaTransaction.DbConnection">
            <summary>
            <para>Specifies the <see cref="T:System.Data.Common.DbConnection"/> object associated with the transaction.</para>
        </summary><returns>
	    <para>The <see cref="T:System.Data.Common.DbConnection"/> object associated with the transaction.</para>
        </returns>
        </member>
        <member name="P:Sap.Data.Hana.HanaTransaction.Connection">
            <summary>
            <para>The HanaConnection object associated with the transaction, or a null reference (Nothing in Visual Basic) if the transaction is no longer valid.</para>
        </summary><remarks>
            <para>A single application can have multiple database connections, each with zero or more transactions. This property enables you to determine the connection object associated with a particular transaction created by BeginTransaction.</para>
        </remarks>
        </member>
        <member name="P:Sap.Data.Hana.HanaTransaction.IsolationLevel">
            <summary>
            <para>Specifies the isolation level for this transaction.</para>
        </summary><value>
		<para>The IsolationLevel for this transaction. This can be one of:</para>
        <list type="bullet">
        <item>
        <term>Unspecified</term> 
        </item>
        <item>
        <term>Chaos</term> 
        </item>
        <item>
        <term>ReadUncommitted</term> 
        </item>
        <item>
        <term>ReadCommitted</term> 
        </item>
        <item>
        <term>RepeatableRead</term> 
        </item>
        <item>
        <term>Serializable</term> 
        </item>
        <item>
        <term>Snapshot</term> 
        </item>
        </list>
        <para>The default is ReadCommitted. Unspecified, Chaos, and Snapshot are not supported.</para>
        </value>
        </member>
        <member name="P:Sap.Data.Hana.HanaTransaction.HanaIsolationLevel">
            <summary>
            <para>Specifies the extended isolation level for this transaction.</para>
        </summary><value>
		<para>The HanaIsolationLevel for this transaction. This can be one of:</para>
        <list type="bullet">
        <item>
        <term>ReadUncommitted</term> 
        </item>
        <item>
        <term>ReadCommitted</term> 
        </item>
        <item>
        <term>RepeatableRead</term> 
        </item>
        <item>
        <term>Serializable</term> 
        </item>
        </list>
        <para>The default is ReadCommitted.</para>
        </value><remarks>
            <para>Parallel transactions are not supported. Therefore, the HanaIsolationLevel applies to the entire transaction.</para>
            <para>If ReadUncommitted is specified, then ReadCommitted is used instead.</para>
        </remarks>
        </member>
        <member name="T:Sap.Data.Hana.HanaUnmanagedDll">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaUtility">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaList">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.HanaOdbcDataSource">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.HanaOdbcDataSource.FindOdbcDataSource(System.String)">
            @internal
        </member>
        <member name="P:Sap.Data.Hana.HanaOdbcDataSource.Server">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.RegKeyUtil64">
            @internal
        </member>
        <member name="F:Sap.Data.Hana.RegKeyUtil64.HKEY_LOCAL_MACHINE">
            @internal
        </member>
        <member name="F:Sap.Data.Hana.RegKeyUtil64.HKEY_CURRENT_USER">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.RegKeyUtil64.IsWin64">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.RegKeyUtil64.RegKeyOpenEx64(System.UIntPtr,System.String,System.Boolean)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.RegKeyUtil64.RegKeyOpenEx32(System.UIntPtr,System.String,System.Boolean)">
            @internal
        </member>
        <member name="M:Sap.Data.Hana.RegKeyUtil64.RegKeyOpenEx(System.UIntPtr,System.String,System.Int32,System.Boolean)">
            @internal
        </member>
        <member name="T:Sap.Data.Hana.OperatingSystemBitness">
            @internal
        </member>
    </members>
</doc>
